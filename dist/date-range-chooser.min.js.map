{"version":3,"sources":["webpack:///webpack/bootstrap 3eba0d914167617efa3a","webpack:///./src/index.js","webpack:///./src/fcts-ext-daterange.js"],"names":[],"mappings":"YACA,cAMA,MACA,eAGA,mBACA,CACA,cACA,EAIA,kDAGA,KAGA,YACA,OAIA,IAzBA,iBA4BA,MAGA,MAGA,0BCtCA,CACA,uBAEA,gBAEA,GAAC,cACD,uBACA,oBACA,yBACA,OACA,yBAEA,6CACA,KAEA,uBAEA,KAAC,qDACD,SACA,8EACA,kBACA,2EAAwE,aACxE,oBACA,IACA,GAAC,eCxBD,CACA,kCAIA,QACA,cAIA,cACA,aACA,oBACA,kBACA,iDACA,+CACA,mDACA,6CACA,iBACA,UAMA,gBACA,aACA,OAEA,iBACA,yBACA,oCACA,sCACA,+BACA,yBACA,gBACA,oEAGA,uBAEA,yBAEA,cACA,aACA,KAEA,eACA,yBACA,oCACA,oCACA,2BACA,iCACA,cACA,kEAGA,qBAEA,uBAEA,gBACA,gCACA,qCACA,0BACA,EAEA,WACA,gBACA,iDACA,aAMA,aAMA,YACA,OACA,iBAEA,QAKA,QACA,OACA,cACA,CACA,QACA,WACA,QACA,UACA,sBACA,uBACA,UACA,aACA,gBACA,SACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IACA,SACA,aACA,UACA,YACA,wBACA,yBACA,YACA,eACA,kBACA,CAEA,0CACA,kEACA,8BACA,cACA,iCACA,iBACA,CAEA,gBACA,IACA,GAEA,EACA,EACA,EACA,EAEA,IANA,cAOA,cAEA,8BACA,6BACA,oCACA,qBACA,iBACA,sBACA,wCAGA,cAKA,gFACA,qBACA,iBACA,sBACA,wCAGA,cAKA,iEACA,cACA,iBACA,+BACS,OACT,MACA,CAUA,0GACA,YACA,iBACA,+BACS,OACT,MACA,CAUA,sIACA,OACA,WACO,IACP,qBACA,iBACA,sBACA,wCACO,WACP,aACA,SACA,4BACA,SACA,EAGA,kBAIA,6EAoBA,YAGA,sCACA,SACA,QACA,CAKA,2DAKA,0DAUA,0GACA,OACA,WACO,IACP,qBACA,iBACA,sBACA,wCACO,WACP,aACA,SACA,4BACA,SACA,EAIA,6EAoBA,YAGA,oCACA,SACA,QACA,CAKA,2DAKA,0DASA,4FACA,OACA,QACA,YACA,+BACA,UAEA,wBACA,YACA,8BACA,kCACA,UAGA,iCACA,OACA,QACA,UACA,6BACA,UAEA,wBACA,UACA,0BACA,gCACA,UAIA,mEACA,eACA,YACA,YACA,YAEA,yCACA,IAEA,eACA,iBACA,sBACA,iBACA,uBACA,GACA,CAEA,qBACA,IACA,GAGA,EAEA,IAJA,IACA,SAKA,sBAA4C,SAAQ,EACpD,yCACA,sBACA,QACA,gCACA,gCAEA,sBACA,QACA,OACA,SAEA,EAEA,gBACA,OACA,eACA,8BACA,gBACA,OACA,yBACA,iBACA,UACA,IACA,iBACA,OACA,EACA,qBACA,OACA,EACA,oBACA,6BACA,QACA,eACA,iBACA,kCACA,YACA,YACA,iBACA,+BACA,KACA,aACA,iBACA,gCACA,OACA,wBACA,YACA,kEACA,YAKA,WAEA,mCACA,YACA,uBACA,MACA,UACA,WAEA,mBAEA,EACA,IAEA,gBACA,IAIA,GACA,EACA,IALA,SACA,gBACA,aAKA,wCACA,mBACA,uBACA,wBACA,6BACA,OACA,OACA,mBAAyC,SAAQ,EACjD,QACA,cAEA,KACA,+EAGA,aACA,+BACA,eACA,6BACA,IAEA,EACA,4CACA,wEACA,yEACA,4EACA,+EACA,4EACA,gBAEA,QACA","file":"date-range-chooser.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3eba0d914167617efa3a","'use strict';\nconst DateRange = require('./fcts-ext-daterange');\n\nwindow.dr = new DateRange();\n\n;(function (env, factory) {\n  if (typeof module === 'object' && module.exports) {\n    module.exports = env.document\n       ? factory(env) : function (win) {\n         if (!win.document) {\n           throw new Error('Window with document not present');\n         }\n         return factory(win, true);\n       };\n  } else {\n    env.DateRangeChooser = factory(env, true);\n  }\n})(typeof window !== 'undefined' ? window : this, function (_window, windowExists) {\n  var FC = _window.FusionCharts;\n  FC.register('extension', ['private', 'date-range-chooser', function () {\n    var DateTimeFormatter = this.hcLib.DateTimeFormatter;\n    FC.registerComponent('extensions', 'date-range-chooser', DateRange({FusionCharts: FC,\n      DateTimeFormatter: DateTimeFormatter}));\n  }]);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 0\n// module chunks = 0","'use strict';\nmodule.exports = function (dep) {\n  /**\n   * Class representing the DateRange.\n   */\n  class DateRange {\n    constructor () {\n      /**\n       * @private\n       */\n      this.startDt = 0;\n      this.endDt = 0;\n      this.startDataset = 0;\n      this.endDataset = 0;\n      this.toolbox = dep.FusionCharts.getComponent('api', 'toolbox');\n      this.HorizontalToolbar = this.toolbox.HorizontalToolbar;\n      this.ComponentGroup = this.toolbox.ComponentGroup;\n      this.SymbolStore = this.toolbox.SymbolStore;\n      this.isDrawn = false;\n    }\n\n    /**\n     * An object representing the start and end dates.\n     * @type {DateRange.range}\n     */\n    get startDate () {\n      return this.startDt;\n    }\n\n    set startDate (startDt) {\n      let startTimestamp = this.getTimestamp(startDt),\n        absoluteStart = this.globalReactiveModel.model['x-axis-absolute-range-start'],\n        minDiff = this.minActiveInterval,\n        actualDiff = this.endDt - startTimestamp;\n      if (startTimestamp <= this.endDt && startTimestamp >= absoluteStart && actualDiff > minDiff) {\n        this.startDt = startTimestamp;\n        this.globalReactiveModel.model['x-axis-visible-range-start'] = this.startDt;\n      } else {\n        // this.fromDate.updateVisual('errored');\n        console.error('From Date error state!');\n      }\n    }\n\n    get endDate () {\n      return this.endDt;\n    }\n\n    set endDate (endDt) {\n      let endTimestamp = this.getTimestamp(endDt),\n        absoluteEnd = this.globalReactiveModel.model['x-axis-absolute-range-end'],\n        minDiff = this.minActiveInterval,\n        actualDiff = endTimestamp - this.startDt;\n      if (endTimestamp >= this.startDt && endTimestamp <= absoluteEnd && actualDiff > minDiff) {\n        this.endDt = endTimestamp;\n        this.globalReactiveModel.model['x-axis-visible-range-end'] = this.endDt;\n      } else {\n        // this.toDate.updateVisual('errored');\n        console.error('To Date error state!');\n      }\n    }\n\n    getTimestamp (dateStr) {\n      let dateFormat = this.extData.dateFormat || '%d-%m-%Y',\n        dateFormatter = new dep.DateTimeFormatter(dateFormat);\n      return +dateFormatter.getNativeDate(dateStr);\n    }\n\n    getDate (timestamp) {\n      var date = new Date(timestamp);\n      return date.getDate() + '-' + (date.getMonth() + 1) + '-' + date.getFullYear();\n    }\n\n    /**\n     * Sets the configurable options of the extension (e.g. cosmetics)\n     * @param {Object} configObj The configuration object containing various extension options\n     */\n    setConfig (configObj) {}\n\n    /**\n     * Gets the configurable options of the extension (e.g. cosmetics)\n     * @return {object} configObj The configuration object containing various extension options\n     */\n    getConfig () {\n      return {\n        calendarVisible: 'false'\n      };\n    }\n\n    /**\n     * Fusioncharts life cycle method for extension\n     */\n    init (require) {\n      var instance = this;\n      require([\n        'xAxis',\n        'graphics',\n        'chart',\n        'dataset',\n        'globalReactiveModel',\n        'spaceManagerInstance',\n        'extData',\n        'smartLabel',\n        'chartInstance',\n        function (\n          xAxis,\n          graphics,\n          chart,\n          dataset,\n          globalReactiveModel,\n          spaceManagerInstance,\n          extData,\n          smartLabel,\n          chartInstance) {\n          instance.xAxis = xAxis;\n          instance.graphics = graphics;\n          instance.chart = chart;\n          instance.dataset = dataset;\n          instance.globalReactiveModel = globalReactiveModel;\n          instance.spaceManagerInstance = spaceManagerInstance;\n          instance.extData = extData;\n          instance.smartLabel = smartLabel;\n          instance.chartInstance = chartInstance;\n        }\n      ]);\n      instance.startDt = instance.globalReactiveModel.model['x-axis-visible-range-start'];\n      instance.endDt = instance.globalReactiveModel.model['x-axis-visible-range-end'];\n      instance.toolbars = [];\n      instance.measurement = {};\n      instance.toolbars.push(instance.createToolbar());\n      return instance;\n    };\n\n    createToolbar () {\n      var toolbar,\n        self = this,\n        fromDateLabel,\n        toDateLabel,\n        group,\n        fromFormattedDate,\n        toFormattedDate;\n\n      self.fromDate = {};\n      self.toDate = {};\n\n      fromFormattedDate = this.getDate(this.startDt);\n      toFormattedDate = this.getDate(this.endDt);\n      toolbar = new this.HorizontalToolbar({\n        paper: this.graphics.paper,\n        chart: this.chart,\n        smartLabel: this.smartLabel,\n        chartContainer: this.graphics.container\n      });\n\n      toolbar.setConfig({\n        'fill': '#FFFFFF',\n        'borderThickness': 0\n      });\n\n      group = new this.toolbox.ComponentGroup({\n        paper: this.graphics.paper,\n        chart: this.chart,\n        smartLabel: this.smartLabel,\n        chartContainer: this.graphics.container\n      });\n\n      group.setConfig({\n        'fill': '#FFFFFF',\n        'borderThickness': 0\n      });\n\n      fromDateLabel = new this.toolbox.Label(\n        'From:', {\n          smartLabel: this.smartLabel,\n          paper: this.graphics.paper\n        }, {\n          text: {\n            style: {\n              'font-size': '13',\n              'font-family': '\"Lucida Grande\", sans-serif',\n              // 'font-weight': 'bold',\n              'fill': '#4B4B4B'\n            }\n          }\n        }\n      );\n\n      toDateLabel = new this.toolbox.Label(\n        'To:', {\n          smartLabel: this.smartLabel,\n          paper: this.graphics.paper\n        }, {\n          text: {\n            style: {\n              'font-size': '13',\n              'font-family': '\"Lucida Grande\", sans-serif',\n              // 'font-weight': 'bold',\n              'fill': '#4B4B4B'\n            }\n          }\n        }\n      );\n\n      self.fromDate = new this.toolbox.InputTextBoxSymbol({\n        width: 120,\n        height: 22\n      }, {\n        paper: this.graphics.paper,\n        chart: this.chart,\n        smartLabel: this.smartLabel,\n        chartContainer: this.graphics.container\n      }, {\n        'strokeWidth': 1,\n        'stroke': '#ced5d4',\n        'symbolStrokeWidth': 0,\n        'radius': 2,\n        'margin': {\n          'right': 22\n        },\n        'btnTextStyle': {\n          'font-family': '\"Lucida Grande\", sans-serif',\n          'fontSize': 13\n        },\n        'label': fromFormattedDate,\n        // 'customConfig': {\n        //   'errored': {\n        //     'hover': {\n        //       'fill': '#FFEFEF',\n        //       'stroke-width': 1,\n        //       'stroke': '#D25353'\n        //     },\n        //     'normal': {\n        //       'fill': '#FFEFEF',\n        //       'stroke-width': 1,\n        //       'stroke': '#D25353'\n        //     },\n        //     'pressed': {\n        //       'fill': '#FFEFEF',\n        //       'stroke-width': 1,\n        //       'stroke': '#D25353'\n        //     }\n        //   }\n        // },\n        'labelFill': '#696969'\n      });\n\n      self.fromDate.setStateConfig({\n        pressed: {\n          config: {\n            pressed: {\n              'fill': '#FFFFFF',\n              'stroke-width': 1,\n              'stroke': '#1E1F1F'\n            },\n            normal: {\n              'fill': '#FFFFFF',\n              'stroke-width': 1,\n              'stroke': '#1E1F1F'\n            },\n            hover: {\n              'fill': '#FFFFFF',\n              'stroke-width': 1,\n              // 'stroke': '#1E1F1F'\n              'stroke': '#0000FF'\n            }\n          }\n        }\n      });\n\n      self.toDate = new this.toolbox.InputTextBoxSymbol({\n        width: 120,\n        height: 22\n      }, {\n        paper: this.graphics.paper,\n        chart: this.chart,\n        smartLabel: this.smartLabel,\n        chartContainer: this.graphics.container\n      }, {\n        'strokeWidth': 1,\n        'stroke': '#ced5d4',\n        'symbolStrokeWidth': 0,\n        'radius': 2,\n        'btnTextStyle': {\n          'font-family': '\"Lucida Grande\", sans-serif',\n          'fontSize': 13\n        },\n        'label': toFormattedDate,\n        // 'customConfig': {\n        //   'errored': {\n        //     'hover': {\n        //       'fill': '#FFEFEF',\n        //       'stroke-width': 1,\n        //       'stroke': '#D25353'\n        //     },\n        //     'normal': {\n        //       'fill': '#FFEFEF',\n        //       'stroke-width': 1,\n        //       'stroke': '#D25353'\n        //     },\n        //     'pressed': {\n        //       'fill': '#FFEFEF',\n        //       'stroke-width': 1,\n        //       'stroke': '#D25353'\n        //     }\n        //   }\n        // },\n        'labelFill': '#696969'\n      });\n\n      self.toDate.setStateConfig({\n        pressed: {\n          config: {\n            pressed: {\n              'fill': '#FFFFFF',\n              'stroke-width': 1,\n              'stroke': '#1E1F1F'\n            },\n            normal: {\n              'fill': '#FFFFFF',\n              'stroke-width': 1,\n              'stroke': '#1E1F1F'\n            },\n            hover: {\n              'fill': '#FFFFFF',\n              'stroke-width': 1,\n              'stroke': '#1E1F1F'\n            }\n          }\n        }\n      });\n\n      self.fromDate.attachEventHandlers({\n        click: {\n          fn: () => {\n            self.fromDate.edit();\n            self.fromDate.updateVisual('pressed');\n          }\n        },\n        textOnBlur: function () {\n          self.fromDate.blur();\n          self.startDate = self.fromDate.getText();\n          self.fromDate.updateVisual('enabled');\n        }\n      });\n\n      self.toDate.attachEventHandlers({\n        click: {\n          fn: () => {\n            self.toDate.edit();\n            self.toDate.updateVisual('pressed');\n          }\n        },\n        textOnBlur: function () {\n          self.toDate.blur();\n          self.endDate = self.toDate.getText();\n          self.toDate.updateVisual('enabled');\n        }\n      });\n\n      // Temporary. Required to render the text box correctly. Commenting this out distorts toolbox.\n      this.SymbolStore.register('textBoxIcon', function (x, y, rad, w, h, padX, padY) {\n        var x1 = x - w / 2 + padX / 2,\n          x2 = x + w / 2 - padX / 2,\n          y1 = y - h / 2 + padY / 2,\n          y2 = y + h / 2 - padY / 2;\n\n        return ['M', x1, y1, 'L', x2, y1, 'L', x2, y2, 'L', x1, y2, 'Z'];\n      });\n\n      group.addSymbol(fromDateLabel);\n      group.addSymbol(self.fromDate);\n      group.addSymbol(toDateLabel);\n      group.addSymbol(self.toDate);\n      toolbar.addComponent(group);\n      return toolbar;\n    };\n\n    getLogicalSpace (availableWidth, availableHeight) {\n      var logicalSpace,\n        width = 0,\n        height = 0,\n        i,\n        ln;\n\n      availableWidth /= 2;\n\n      for (i = 0, ln = this.toolbars.length; i < ln; i++) {\n        logicalSpace = this.toolbars[i].getLogicalSpace(availableWidth, availableHeight);\n        width = Math.max(logicalSpace.width, width);\n        height += logicalSpace.height;\n        this.toolbars[i].width = logicalSpace.width;\n        this.toolbars[i].height = logicalSpace.height;\n      }\n      height += this.padding;\n      return {\n        width: width,\n        height: height\n      };\n    };\n\n    placeInCanvas () {\n      var self = this;\n      self.padding = 5;\n      self.spaceManagerInstance.add([{\n        name: function () {\n          return 'DateRangeChooserToolbox';\n        },\n        ref: function (obj) {\n          return obj['0'];\n        },\n        self: function () {\n          return self;\n        },\n        priority: function () {\n          return 2;\n        },\n        layout: function (obj) {\n          return obj[self.extData.layout] || obj['inline'];\n        },\n        orientation: [{\n          type: function (obj) {\n            return obj[self.extData.orientation] || obj['horizontal'];\n          },\n          position: [{\n            type: function (obj) {\n              return obj[self.extData.position] || obj['top'];\n            },\n            alignment: [{\n              type: function (obj) {\n                return obj[self.extData.alignment] || obj['right'];\n              },\n              dimensions: [function () {\n                var parent = this.getParentComponentGroup();\n                return self.getLogicalSpace(parent.getWidth(), parent.getHeight());\n              }]\n            }]\n          }]\n        }]\n      }]);\n    };\n\n    setDrawingConfiguration (x, y, width, height, group) {\n      var mes = this.measurement;\n      mes.x = x;\n      mes.y = y;\n      mes.width = width;\n      mes.height = height;\n\n      this.parentGroup = group;\n\n      return this;\n    };\n\n    draw (x, y, width, height, group) {\n      let self = this,\n        measurement = self.measurement,\n        toolbars = self.toolbars,\n        ln,\n        i,\n        toolbar,\n        model = self.globalReactiveModel;\n\n      x = x === undefined ? measurement.x : x;\n      y = y === undefined ? measurement.y : y;\n      width = width === undefined ? measurement.width : width;\n      height = height === undefined ? measurement.height : height;\n      group = group === undefined ? self.parentGroup : group;\n      if (width && height) {\n        self.isDrawn = true;\n        for (i = 0, ln = toolbars.length; i < ln; i++) {\n          toolbar = toolbars[i];\n          toolbar.draw(x, y, group);\n        }\n        model.onPropsChange(['x-axis-visible-range-start', 'x-axis-visible-range-end'],\n          (start, end) => {\n            // self.fromDate.blur(new Date(start[1]).toLocaleDateString());\n            // self.toDate.blur(new Date(end[1]).toLocaleDateString());\n            self.startDt = start[1];\n            self.fromDate.blur(self.getDate(start[1]));\n            self.endDt = end[1];\n            self.toDate.blur(self.getDate(end[1]));\n          }\n        );\n      }\n      self.startDataset = self.globalReactiveModel.model['x-axis-absolute-range-start'];\n      self.endDataset = self.globalReactiveModel.model['x-axis-absolute-range-end'];\n      self.maxXAxisTicks = self.globalReactiveModel.model['x-axis-maximum-allowed-ticks'];\n      self.maxXAxisTicks = self.globalReactiveModel.model['x-axis-maximum-allowed-ticks'];\n      self.minDatestampDiff = self.globalReactiveModel.model['minimum-consecutive-datestamp-diff'];\n      self.minActiveInterval = self.maxXAxisTicks * self.minDatestampDiff;\n    };\n  }\n  return DateRange;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/fcts-ext-daterange.js\n// module id = 1\n// module chunks = 0"],"sourceRoot":""}