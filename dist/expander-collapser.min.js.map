{"version":3,"sources":["webpack:///webpack/bootstrap 8c457d42200d62c4e2e2","webpack:///./src/index.js","webpack:///./src/fcts-ext-expandercollapser.js","webpack:///./src/fcts-ext-sidepanel.js"],"names":[],"mappings":"YACA,cAMA,MACA,eAGA,mBACA,CACA,cACA,EAIA,kDAGA,KAGA,YACA,OAIA,IAzBA,iBA4BA,MAGA,MAGA,0BCtCA,CACA,uBACA,OACA,GAAC,cACD,uBACA,oBACA,yBACA,OACA,yBAEA,6CACA,KAEA,uBAEA,KAAC,qDACD,SACA,iBACA,gFACA,kBACA,0EACA,cACA,oBAEA,8DACA,cACA,oBAGA,oDACA,cACA,oBAUA,IACA,GAAC,eC1CD,CACA,kCAIA,CA0gBA,YAzgBA,cAIA,IACA,iFAEA,gCAEA,0CACA,CACA,iBAEA,sDACA,mDACA,oBACA,oBAEA,qBACA,CACA,4DACA,CACA,gBACA,4BAGA,2DAEA,eAA6B,cAA0B,OACvD,mBAEA,GACA,oBAEA,0CACA,YAKA,UACA,EAEA,EAEA,kBACA,CACA,GACA,GACA,EACA,EAEA,EACA,iBACA,uBACA,yBACA,KAEA,kBACA,SAEA,+BACA,eACA,iCACA,mFACA,OACA,OACA,uEAGA,mDACA,mCAEA,KACA,CAEA,iBACA,CACA,GACA,GACA,EACA,iBACA,QAEA,OACA,kBACA,cACA,mBACA,qCAGA,sBACA,SACA,iCAGA,6DACA,GACA,CAKA,QACA,OACA,cACA,CACA,WACA,QACA,eACA,gBACA,gBACA,sBACA,uBACA,aACA,UACA,gBACA,SACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IACA,YACA,UACA,kBACA,iBACA,kBACA,wBACA,yBACA,eACA,gBACA,kBACA,CAEA,cACA,CACA,6BACA,MACA,gBACA,uBACA,oCACA,qBACA,eACA,kBACA,gBACA,mBACA,aASA,8IACA,SACA,QACA,UACA,YACA,qCACA,OACA,MACA,yBACA,aACA,oBACA,sBAKA,aACA,CAQA,0IACA,OACA,WACA,iDACA,OACA,QACA,eAMA,qBACA,WACA,sCACA,CAOA,sHACA,QAKA,iBACA,kCACA,eACA,2BACA,gBACA,CAGA,gBACA,QACA,qBAEA,iBAEA,KAIA,GACA,EACA,EAaA,IAjBA,OAKA,kBACA,cACA,mBACA,qCAEA,aACA,MACA,uBAEA,6BAIA,eAGA,6CAEA,eAGA,KACA,QACA,QACA,cACA,SACA,QAMA,OAEA,oCACA,0BACA,YAEA,OACA,UAEA,0BAAqB,EAAO,IAC5B,IACA,iCACA,eACA,SACA,QACA,OACA,OAGA,UAEA,SACA,gBACA,yBAGA,4BACA,2BACA,MACA,YACA,QACA,OACA,OAGA,UACA,iBACA,iBACA,SACA,aACA,kBACA,mBACA,qBACA,qDACA,EAKA,gDACA,6CA2BA,iBACA,aACA,EACA,CAEA,iBACA,IACA,GACA,kBACA,cACA,OACA,GAEA,cADA,8CAGA,OACA,6CAGA,aAEA,cACA,OACA,SAEA,kBAAyC,SAAS,EAClD,qBAEA,SAEA,qBACA,IAGA,GAEA,SAJA,gBACA,gCAIA,4BACA,oCACA,4BACA,kBAEA,iCAEA,6DAEA,GACA,OACA,OACA,YAEA,gBAEA,OAEA,gBACA,kCACA,KAEA,gBACA,OACA,iCACA,gBACA,UACA,eACA,iBACA,OACA,KACA,iBACA,OACA,EACA,qBACA,OACA,EACA,oBACA,mBACA,OACA,eACA,iBACA,mBACA,YACA,YACA,iBACA,mBACA,SACA,aACA,iBACA,mBACA,UACA,wBACA,YACA,kEACA,YAKA,WAEA,mCACA,YACA,uBACA,MACA,UACA,WAEA,mBAEA,EACA,IAEA,4BACA,IAGA,GACA,EAEA,EACA,EAMA,SAZA,eACA,EAGA,YAGA,aACA,mBACA,mBACA,kBACA,iDAIA,aAEA,UAA4C,SAAS,MACrD,QACA,gBACA,qCACA,OACA,UACA,MACA,MACA,KACA,UACA,SAEA,qCAEA,6BACA,SACA,QACA,QACA,6BAEA,gCAGA,gCACA,EACA,CAEA,gBACA,IAKA,KAJA,SACA,gBACA,yBAGA,mBACA,uBACA,wBACA,6BACA,KACA,eACA,8CACA,wBACA,uBACA,cAEA,GAEA,gBC9gBA,CACA,kCAIA,CAsmBA,YArmBA,cAIA,IACA,iFAEA,gCAEA,0CACA,CACA,iBAEA,sDACA,mDACA,oBACA,oBAEA,qBACA,CACA,4DACA,CACA,gBACA,4BAGA,2DAEA,eAA6B,cAA0B,OACvD,mBAEA,GACA,oBAEA,0CACA,YAKA,UACA,EAEA,EAEA,kBACA,CACA,GACA,GACA,EACA,EAEA,EACA,iBACA,uBACA,yBACA,KAEA,kBACA,SAEA,+BACA,eACA,iCACA,mFACA,OACA,OACA,uEAGA,mDACA,mCAEA,KACA,CAEA,iBACA,CACA,GACA,GACA,EACA,iBACA,QAEA,OACA,kBACA,cACA,mBACA,qCAGA,sBACA,SACA,iCAGA,6DACA,GACA,CAKA,QACA,OACA,cACA,CACA,WACA,QACA,eACA,gBACA,gBACA,sBACA,uBACA,aACA,UACA,gBACA,SACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IACA,YACA,UACA,kBACA,iBACA,kBACA,wBACA,yBACA,eACA,gBACA,kBACA,CAEA,cACA,CACA,6BACA,MACA,gBACA,uBACA,oCACA,qBACA,eACA,kBACA,gBACA,oBACA,aASA,8IACA,SACA,QACA,UACA,YACA,qCACA,OACA,MACA,yBACA,aACA,oBACA,sBAKA,aACA,CAQA,0IACA,OACA,WACA,iDACA,OACA,QACA,eAMA,qBACA,WACA,sCACA,CAOA,sHACA,QAKA,iBACA,kCACA,eACA,2BACA,gBACA,CAGA,gBACA,QACA,qBAEA,iBAEA,KAIA,GACA,EACA,IAJA,OAKA,kBACA,cACA,mBACA,qCAEA,aACA,MACA,uBAKA,6BACA,eAGA,6CAEA,eAGA,KACA,QACA,QACA,cACA,SACA,QAMA,OAEA,mBACA,UAGA,8CACA,2BACA,MACA,iBACA,QACA,OACA,OAGA,UAEA,OACA,cACO,GACP,2BACA,MACA,kBACA,QACA,OACA,OAGA,UACA,iBACA,iBACA,cACA,mBACA,UAGA,QACA,cA2BA,mBACA,aACA,EACA,CAEA,iBACA,IACA,GACA,kBACA,cACA,OACA,GAEA,cADA,8CAGA,OACA,6CAGA,aAEA,cACA,OACA,SAEA,kBAAyC,SAAS,EAClD,qBAEA,SAEA,qBACA,IAGA,GAEA,SAJA,eACA,+BAIA,4BACA,oCACA,4BACA,kBAEA,iCAEA,6DAEA,GACA,OACA,OACA,YAEA,gBAEA,OAEA,oBACA,OACA,wBACA,wBAEA,EAEA,gBACA,kCACA,KAEA,gBACA,OACA,iCACA,gBACA,UACA,eACA,iBACA,OACA,KACA,iBACA,OACA,EACA,qBACA,OACA,EACA,oBACA,mBACA,OACA,eACA,iBACA,mBACA,YACA,YACA,iBACA,mBACA,SACA,aACA,iBACA,mBACA,UACA,wBACA,YACA,kEACA,YAMA,wCACA,gBACA,OACA,WACA,iBACA,OACA,KACA,iBACA,OACA,EACA,qBACA,OACA,EACA,oBACA,UACA,KACA,eACA,iBACA,UACA,QACA,YACA,iBACA,UACA,KACA,aACA,iBACA,UACA,MACA,wBACA,YACA,oEACA,YAKA,WAEA,mCACA,YACA,uBACA,MACA,UACA,WAEA,mBAEA,EACA,IAEA,gBACA,OACA,SACA,gBAGA,yBACA,mBACA,uBACA,wBACA,6BACA,KACA,eACA,2CAEA,YAEA,eACA,oBAqEA,cACA,OACA,gBACA,GAEA,yBACA,EACA,eACA,aACA,gBACA,QACA,oBAGA,YACA,cAGA,UACA,EAEA,OAzFA,MACA,qBACA,iBAEA,SACA,SACA,qBAEA,WACA,MACA,CACA,4BAEA,SACA,QAEA,iBACA,CACA,0BACS,GACT,CACA,0BACS,GACT,CACA,qCACS,GACT,CACA,0BAEO,KACP,MACA,CACA,yBAEA,SACA,QAEA,iBACA,CACA,0BACS,GACT,CACA,0BACS,GACT,CACA,qCACS,GACT,CACA,0BAIA,MACA,4BACA,qBACA,SAEA,YACA,EACA,eACA,aACA,gBACA,uBACA,uBACA,4BACA,uBAEA,sBAsBwC,SAAS,KACjD,gDACA,wDACA,YACA,qCAAyD,SAAU,KACnE,oFAMA,MAEA,YACA,yBACA,kBACA,SACA,QAEA","file":"expander-collapser.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8c457d42200d62c4e2e2","'use strict';\nconst DateRange = require('./fcts-ext-expandercollapser');\nconst SidePanel = require('./fcts-ext-sidepanel.js');\n;(function (env, factory) {\n  if (typeof module === 'object' && module.exports) {\n    module.exports = env.document\n       ? factory(env) : function (win) {\n         if (!win.document) {\n           throw new Error('Window with document not present');\n         }\n         return factory(win, true);\n       };\n  } else {\n    env.DateRangeChooser = factory(env, true);\n  }\n})(typeof window !== 'undefined' ? window : this, function (_window, windowExists) {\n  var FC = _window.FusionCharts,\n    FusionCalendar = _window.FusionCalendar;\n  FC.register('extension', ['private', 'expander-collapser', function () {\n    var DateTimeFormatter = this.hcLib.DateTimeFormatter;\n    FC.registerComponent('extensions', 'expander-collapser', DateRange({\n      FusionCharts: FC,\n      DateTimeFormatter: DateTimeFormatter\n    }));\n    FC.registerComponent('extensions', 'expander-collapser2', DateRange({\n      FusionCharts: FC,\n      DateTimeFormatter: DateTimeFormatter\n    }));\n\n    FC.registerComponent('extensions', 'SidePanel', SidePanel({\n      FusionCharts: FC,\n      DateTimeFormatter: DateTimeFormatter\n    }));\n    // FC.registerComponent('extensions', 'expander-collapser3', DateRange({\n    //   FusionCharts: FC,\n    //   DateTimeFormatter: DateTimeFormatter\n    // }));\n    // FC.registerComponent('extensions', 'expander-collapser4', DateRange({\n    //   FusionCharts: FC,\n    //   DateTimeFormatter: DateTimeFormatter\n    // }));\n  }]);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 0\n// module chunks = 0","'use strict';\nmodule.exports = function (dep) {\n  /**\n   * Class representing the DateRange\n   */\n  class DateRange {\n    constructor() {\n      /**\n      * @private\n      */\n      if (typeof dep.FusionCharts === 'function') {\n        this.toolbox = dep.FusionCharts.getComponent('api', 'toolbox');\n      } else {\n        throw new Error('Unable to find FusionCharts.');\n      }\n      this.btns = {\n        contextualObj: {},\n        calculatedObj: {}\n      };\n      this.HorizontalToolbar = this.toolbox.HorizontalToolbar;\n      this.ComponentGroup = this.toolbox.ComponentGroup;\n      this.createObjectAssign();\n    }\n\n    createObjectAssign () {\n      if (typeof Object.assign !== 'function') {\n        Object.assign = function (target, varArgs) {\n          'use strict';\n          if (target == null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n          }\n\n          var to = Object(target);\n\n          for (let index = 1; index < arguments.length; index++) {\n            let nextSource = arguments[index];\n\n            if (nextSource != null) {\n              for (let nextKey in nextSource) {\n                // Avoid bugs when hasOwnProperty is shadowed\n                if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                  to[nextKey] = nextSource[nextKey];\n                }\n              }\n            }\n          }\n          return to;\n        };\n      }\n    }\n\n    createD3Button (buttonConf) {\n      var key,\n        text,\n        config,\n        states,\n        state,\n        btn,\n        button,\n        styles = this.extData.button,\n        paper = this.graphics.paper,\n        d3 = paper.getInstances().d3,\n        self = this;\n\n      text = buttonConf.text;\n      config = buttonConf.config;\n\n      button = d3.button(text).setConfig(config);\n      button.namespace('fusioncharts');\n      button.appendSelector('standarperiodselector');\n      self.addCssRules(button.getIndividualClassNames(button.getClassName()), styles);\n      states = styles.states;\n      for (state in states) {\n        self.addCssRules(button.getIndividualClassNames(button.config.states[state]), styles.states[state]);\n      }\n\n      buttonConf.eventListeners && button.attachEventHandlers({\n        click: buttonConf.eventListeners.click.bind(button)\n      });\n      return button;\n    };\n\n    createD3Label (label) {\n      var key,\n        text,\n        config,\n        instance,\n        styles = this.extData.label,\n        self = this,\n        button,\n        dependencies = {\n          paper: self.graphics.paper,\n          chart: self.chart,\n          smartLabel: self.smartLabel,\n          chartContainer: self.graphics.container\n        };\n\n      text = label.text;\n      config = label.config;\n      instance = new self.toolbox.Label(text, dependencies, config);\n      // self[key].namespace('fusioncharts');\n      // self[key].appendSelector('daterange');\n      self.addCssRules(instance.getIndividualClassNames(instance.getClassName()), styles);\n      return instance;\n    };\n\n    /**\n     * Fusioncharts life cycle method for extension\n     */\n    init (require) {\n      var instance = this;\n      require([\n        'graphics',\n        'chart',\n        'canvasConfig',\n        'MarkerManager',\n        'reactiveModel',\n        'globalReactiveModel',\n        'spaceManagerInstance',\n        'smartLabel',\n        'extData',\n        'chartInstance',\n        function (\n              graphics,\n              chart,\n              canvasConfig,\n              markerManager,\n              reactiveModel,\n              globalReactiveModel,\n              spaceManagerInstance,\n              smartLabel,\n              extData,\n              chartInstance) {\n          instance.graphics = graphics;\n          instance.chart = chart;\n          instance.markerManager = markerManager;\n          instance.canvasConfig = canvasConfig;\n          instance.reactiveModel = reactiveModel;\n          instance.globalReactiveModel = globalReactiveModel;\n          instance.spaceManagerInstance = spaceManagerInstance;\n          instance.smartLabel = smartLabel;\n          instance.extDataUser = extData;\n          instance.chartInstance = chartInstance;\n        }\n      ]);\n      instance.extData = {\n        'disabled': false,\n        'default-select': 'ALL',\n        'all-button': true,\n        'contextual-button': true,\n        'calculated-button': true,\n        'posWrtCanvas': 'top',\n        'anchor-align': 'right',\n        'layout': 'inline',\n        'position': 'top',\n        'alignment': 'left',\n        'orientation': 'horizontal',\n        'customMultipliers': {\n          'millisecond': [1, 500],\n          'second': [1, 5, 15, 30],\n          'minute': [1, 5, 15, 30],\n          'hour': [1, 3, 6, 12],\n          'day': [1, 7, 15],\n          'month': [1, 3, 6],\n          'year': [1, 3, 5]\n        },\n        padding: 0,\n        button: {\n          height: 22,\n          radius: 1,\n          className: 'standard-period-selector',\n          container: {\n            style: {\n              fill: '#FFFFFF',\n              'stroke-width': '1px',\n              stroke: '#CED5D4',\n              labelFill: '#4b4b4b',\n              strokeWidth: '1px'\n              // 'input-shadow-fill': '#000000',\n              // 'input-shadow-opacity': 0.35,\n            }\n          },\n          text: {\n            style: {\n              'fontFamily': '\"Lucida Grande\", sans-serif',\n              'font-size': '13px',\n              'fill': '#4b4b4b',\n              'line-height': '1px',\n              'letter-spacing': '-0.04em'\n            }\n          },\n          states: {\n            hover: {\n              className: 'standard-period-selector-state-hover',\n              container: {\n                style: {\n                  cursor: 'pointer',\n                  fill: '#f7f7f7'\n                }\n              }\n            }\n          }\n        },\n        label: {\n          className: 'standard-period-selector-label',\n          text: {\n            style: {\n              'font-weight': 'bold',\n              'font-family': '\"Lucida Grande\", sans-serif',\n              'font-size': '13px',\n              'fill': '#4b4b4b'\n            }\n          },\n          container: {\n            height: 22\n          }\n        }\n      };\n\n      instance.config = instance.extData;\n      Object.assign(instance.extData, instance.extDataUser);\n      instance.measurement = {};\n      instance.toolbar = instance.createToolbar();\n      return instance;\n    };\n\n    // creates toolbar\n    createToolbar () {\n      if (!window.count) {\n        window.count = 0;\n      }\n      window.count += 1;\n\n      var self = this,\n        buttonGroup,\n        toolbar,\n        allButton,\n        label,\n        group,\n        dependencies = {\n          paper: self.graphics.paper,\n          chart: self.chart,\n          smartLabel: self.smartLabel,\n          chartContainer: self.graphics.container\n        },\n        obj = {\n          fill: '#fff',\n          borderThickness: 0\n        },\n        button;\n\n      // initiating the toolbar\n      toolbar = new self.HorizontalToolbar(dependencies);\n      toolbar.setConfig(obj);\n\n      // making group for the extension label\n      group = this.group = new self.toolbox.ComponentGroup(dependencies);\n\n      group.setConfig(obj);\n\n      // extension label\n      label = {\n        height: 22,\n        text: 'Zoom:',\n        group: group,\n        config: {\n          height: 22\n        }\n      };\n\n\n\n      self.componentArr = [];\n\n      self.componentArr.push({\n        instance: self.createD3Label(label),\n        priority: 1\n      });\n      var obj = {},\n        name = self.getModuleName();\n\n      for (let i = 0; i < 6; i++) {\n        button = {};\n        button.instance = self.createD3Button({\n          text: 'BUTTON' + i,\n          config: {\n            margin: {\n              right: 5,\n              left: 5\n            }\n          },\n          group: group\n        });\n        button.id = 'id';\n        button.priority = 2;\n        this.componentArr.push(button);\n      };\n\n      this.expandButton = {\n        instance: self.createD3Button({\n          text: '>>',\n          config: {\n            margin: {\n              right: 2,\n              left: 2\n            }\n          },\n          group: group,\n          eventListeners: {\n            click: function () {\n              var fullview = self.fullview,\n                previousWidth = self.previousWidth,\n                maxSpace = self.maxSpace,\n                diff = maxSpace.width - previousWidth;\n                console.log('diff', diff);\n              self.spaceManagerInstance.cacheByName(name).adjustWidth(diff);\n            }\n          }\n        })\n      };\n\n      this.expandButton.logicalSpace = button.instance.getLogicalSpace();\n      this.expandButton.priority = 0;\n\n\n      // self.createD3Buttons({\n      //   'expander': {\n      //     text: '>>',\n      //     config: {\n      //       margin: {\n      //         right: 2,\n      //         left: 2\n      //       }\n      //     },\n      //     group: group,\n      //     eventListeners: {\n      //       click: function () {\n      //         self.expand = !self.expand;\n      //         for (var key in self.btns) {\n      //           obj = self.btns[key];\n      //           /button/.test(key) && (self.expand ? obj.btn.hide() : obj.btn.show());\n      //         }\n      //         self.toolbar.redraw();\n      //       }\n      //     }\n      //   }\n      // });\n\n      // adding group and button group to toolbar\n      toolbar.addComponent(group);\n      self.toolbar = toolbar;\n      return toolbar;\n    };\n\n    addCssRules (classNames, styles) {\n      var key,\n        className,\n        paper = this.graphics.paper;\n      for (key in classNames) {\n        className = classNames[key];\n        switch (key) {\n          case 'container':\n            styles.container && paper.cssAddRule('.' + className, styles.container.style);\n            break;\n          case 'text':\n            styles.text && paper.cssAddRule('.' + className, styles.text.style);\n        }\n      }\n    };\n\n    addSymbols (symbolArr) {\n      var i, len,\n        group = this.group;\n\n      for (i = 0, len = symbolArr.length; i < len; i++) {\n        group.addSymbol(symbolArr[i].instance);\n      }\n    };\n\n    getLogicalSpace (availableWidth, availableHeight) {\n      var buttons = this.buttons,\n        minArr = [this.expandButton],\n        minSpace,\n        maxSpace;\n\n      this.group.emptyList();\n      this.addSymbols(minArr);\n      minSpace = this.toolbar.getLogicalSpace(availableWidth, availableHeight);\n      console.log('minWidth', minSpace.width);\n      this.group.emptyList();\n\n      this.addSymbols(this.componentArr);\n\n      this.maxSpace = maxSpace = this.toolbar.getLogicalSpace(availableWidth, availableHeight);\n\n      return {\n        width: {\n          max: maxSpace.width,\n          min: minSpace.width\n        },\n        height: maxSpace.height\n      };\n    };\n\n    getModuleName () {\n      return 'ExpanderCollapser' + window.count;\n    }\n\n    placeInCanvas () {\n      var self = this;\n      self.spaceManagerInstance.add([{\n        name: function () {\n          return self.getModuleName();\n        },\n        ref: function (obj) {\n          return obj['0'];\n        },\n        self: function () {\n          return self;\n        },\n        priority: function () {\n          return 2;\n        },\n        layout: function (obj) {\n          return obj[self.config.layout];\n        },\n        orientation: [{\n          type: function (obj) {\n            return obj[self.config.orientation];\n          },\n          position: [{\n            type: function (obj) {\n              return obj[self.config.position];\n            },\n            alignment: [{\n              type: function (obj) {\n                return obj[self.config.alignment];\n              },\n              dimensions: [function () {\n                var parent = this.getParentComponentGroup();\n                return self.getLogicalSpace(parent.getWidth(), parent.getHeight());\n              }]\n            }]\n          }]\n        }]\n      }]);\n    };\n\n    setDrawingConfiguration (x, y, width, height, group) {\n      var mes = this.measurement;\n      mes.x = x;\n      mes.y = y;\n      mes.width = width;\n      mes.height = height;\n\n      this.parentGroup = group;\n\n      return this;\n    };\n\n    getDrawableComponentList (width, height) {\n      var componentArr = this.componentArr,\n        totalWidth = 0,\n        len,\n        component,\n        arr = [],\n        i,\n        logicalSpace,\n        group = this.group,\n        toolbar = this.toolbar,\n        padding = group.config.padding,\n        margin = group.config.margin,\n        tPad = toolbar.config.padding,\n        btn,\n        hSpace = tPad.left + tPad.right + padding.left + padding.right + margin.left + margin.right;\n\n\n      width -= hSpace;\n\n      for (i = 0, len = componentArr.length; i < len; i++) {\n        component = componentArr[i];\n        logicalSpace = component.instance.getLogicalSpace();\n        this.previousWidth = totalWidth;\n        totalWidth += logicalSpace.width;\n        if (totalWidth > width) {\n          totalWidth -= logicalSpace.width;\n          break;\n        }\n        arr.push(component.instance);\n      }\n\n      logicalSpace = this.expandButton.instance.getLogicalSpace();\n\n      if (arr.length !== len) {\n        totalWidth += logicalSpace.width;\n        if (totalWidth > width) {\n          btn = arr.pop();\n          totalWidth -= btn.getLogicalSpace().width;\n        }\n        arr.push(this.expandButton.instance);\n      }\n\n      this.previousWidth = totalWidth + hSpace;\n      return arr;\n    }\n\n    draw (x, y, width, height, group) {\n      let self = this,\n        measurement = self.measurement,\n        toolbar = self.toolbar,\n        list;\n\n      x = x === undefined ? measurement.x : x;\n      y = y === undefined ? measurement.y : y;\n      width = width === undefined ? measurement.width : width;\n      height = height === undefined ? measurement.height : height;\n      group = group === undefined ? self.parentGroup : group;\n      if (width && height) {\n        this.group.emptyList();\n        list = this.getDrawableComponentList(width, height);\n        this.group.addSymbol(list);\n        toolbar.getLogicalSpace(width, height);\n        toolbar.draw(x, y, group);\n      }\n    };\n  }\n  return DateRange;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/fcts-ext-expandercollapser.js\n// module id = 1\n// module chunks = 0","'use strict';\nmodule.exports = function (dep) {\n  /**\n   * Class representing the DateRange\n   */\n  class KPIIndicator {\n    constructor() {\n      /**\n      * @private\n      */\n      if (typeof dep.FusionCharts === 'function') {\n        this.toolbox = dep.FusionCharts.getComponent('api', 'toolbox');\n      } else {\n        throw new Error('Unable to find FusionCharts.');\n      }\n      this.btns = {\n        contextualObj: {},\n        calculatedObj: {}\n      };\n      this.HorizontalToolbar = this.toolbox.HorizontalToolbar;\n      this.ComponentGroup = this.toolbox.ComponentGroup;\n      this.createObjectAssign();\n    }\n\n    createObjectAssign () {\n      if (typeof Object.assign !== 'function') {\n        Object.assign = function (target, varArgs) {\n          'use strict';\n          if (target == null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n          }\n\n          var to = Object(target);\n\n          for (let index = 1; index < arguments.length; index++) {\n            let nextSource = arguments[index];\n\n            if (nextSource != null) {\n              for (let nextKey in nextSource) {\n                // Avoid bugs when hasOwnProperty is shadowed\n                if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                  to[nextKey] = nextSource[nextKey];\n                }\n              }\n            }\n          }\n          return to;\n        };\n      }\n    }\n\n    createD3Button (buttonConf) {\n      var key,\n        text,\n        config,\n        states,\n        state,\n        btn,\n        button,\n        styles = this.extData.button,\n        paper = this.graphics.paper,\n        d3 = paper.getInstances().d3,\n        self = this;\n\n      text = buttonConf.text;\n      config = buttonConf.config;\n\n      button = d3.button(text).setConfig(config);\n      button.namespace('fusioncharts');\n      button.appendSelector('standarperiodselector');\n      self.addCssRules(button.getIndividualClassNames(button.getClassName()), styles);\n      states = styles.states;\n      for (state in states) {\n        self.addCssRules(button.getIndividualClassNames(button.config.states[state]), styles.states[state]);\n      }\n\n      buttonConf.eventListeners && button.attachEventHandlers({\n        click: buttonConf.eventListeners.click.bind(button)\n      });\n      return button;\n    };\n\n    createD3Label (label) {\n      var key,\n        text,\n        config,\n        instance,\n        styles = this.extData.label,\n        self = this,\n        button,\n        dependencies = {\n          paper: self.graphics.paper,\n          chart: self.chart,\n          smartLabel: self.smartLabel,\n          chartContainer: self.graphics.container\n        };\n\n      text = label.text;\n      config = label.config;\n      instance = new self.toolbox.Label(text, dependencies, config);\n      // self[key].namespace('fusioncharts');\n      // self[key].appendSelector('daterange');\n      self.addCssRules(instance.getIndividualClassNames(instance.getClassName()), styles);\n      return instance;\n    };\n\n    /**\n     * Fusioncharts life cycle method for extension\n     */\n    init (require) {\n      var instance = this;\n      require([\n        'graphics',\n        'chart',\n        'canvasConfig',\n        'MarkerManager',\n        'reactiveModel',\n        'globalReactiveModel',\n        'spaceManagerInstance',\n        'smartLabel',\n        'extData',\n        'chartInstance',\n        function (\n              graphics,\n              chart,\n              canvasConfig,\n              markerManager,\n              reactiveModel,\n              globalReactiveModel,\n              spaceManagerInstance,\n              smartLabel,\n              extData,\n              chartInstance) {\n          instance.graphics = graphics;\n          instance.chart = chart;\n          instance.markerManager = markerManager;\n          instance.canvasConfig = canvasConfig;\n          instance.reactiveModel = reactiveModel;\n          instance.globalReactiveModel = globalReactiveModel;\n          instance.spaceManagerInstance = spaceManagerInstance;\n          instance.smartLabel = smartLabel;\n          instance.extDataUser = extData;\n          instance.chartInstance = chartInstance;\n        }\n      ]);\n      instance.extData = {\n        'disabled': false,\n        'default-select': 'ALL',\n        'all-button': true,\n        'contextual-button': true,\n        'calculated-button': true,\n        'posWrtCanvas': 'top',\n        'anchor-align': 'right',\n        'layout': 'inline',\n        'position': 'top',\n        'alignment': 'right',\n        'orientation': 'horizontal',\n        'customMultipliers': {\n          'millisecond': [1, 500],\n          'second': [1, 5, 15, 30],\n          'minute': [1, 5, 15, 30],\n          'hour': [1, 3, 6, 12],\n          'day': [1, 7, 15],\n          'month': [1, 3, 6],\n          'year': [1, 3, 5]\n        },\n        padding: 0,\n        button: {\n          height: 22,\n          radius: 1,\n          className: 'standard-period-selector',\n          container: {\n            style: {\n              fill: '#FFFFFF',\n              'stroke-width': '1px',\n              stroke: '#CED5D4',\n              labelFill: '#4b4b4b',\n              strokeWidth: '1px'\n              // 'input-shadow-fill': '#000000',\n              // 'input-shadow-opacity': 0.35,\n            }\n          },\n          text: {\n            style: {\n              'fontFamily': '\"Lucida Grande\", sans-serif',\n              'font-size': '13px',\n              'fill': '#4b4b4b',\n              'line-height': '1px',\n              'letter-spacing': '-0.04em'\n            }\n          },\n          states: {\n            hover: {\n              className: 'standard-period-selector-state-hover',\n              container: {\n                style: {\n                  cursor: 'pointer',\n                  fill: '#f7f7f7'\n                }\n              }\n            }\n          }\n        },\n        label: {\n          className: 'standard-period-selector-label',\n          text: {\n            style: {\n              'font-weight': 'bold',\n              'font-family': '\"Lucida Grande\", sans-serif',\n              'font-size': '13px',\n              'fill': '#4b4b4b'\n            }\n          },\n          container: {\n            height: 22\n          }\n        }\n      };\n\n      instance.config = instance.extData;\n      Object.assign(instance.extData, instance.extDataUser);\n      instance.measurement = {};\n      instance.toolbar = instance.createToolbar();\n      return instance;\n    };\n\n    // creates toolbar\n    createToolbar () {\n      if (!window.count) {\n        window.count = 0;\n      }\n      window.count += 1;\n\n      var self = this,\n        buttonGroup,\n        toolbar,\n        allButton,\n        label,\n        group,\n        dependencies = {\n          paper: self.graphics.paper,\n          chart: self.chart,\n          smartLabel: self.smartLabel,\n          chartContainer: self.graphics.container\n        },\n        obj = {\n          fill: '#fff',\n          borderThickness: 0\n        },\n        button;\n\n      // initiating the toolbar\n      toolbar = new self.HorizontalToolbar(dependencies);\n      toolbar.setConfig(obj);\n\n      // making group for the extension label\n      group = this.group = new self.toolbox.ComponentGroup(dependencies);\n\n      group.setConfig(obj);\n\n      // extension label\n      label = {\n        height: 22,\n        text: 'Zoom:',\n        group: group,\n        config: {\n          height: 22\n        }\n      };\n\n\n\n      self.componentArr = [];\n\n      var obj = {},\n        name = self.getModuleName();\n\n\n      this.componentArr.push({\n        instance: self.createD3Button({\n          text: 'Set Min',\n          config: {\n            margin: {\n              right: 5,\n              left: 5\n            }\n          },\n          group: group\n        }),\n        id: 'id',\n        priority: 2\n      }, {\n        instance: self.createD3Button({\n          text: 'Show KPI',\n          config: {\n            margin: {\n              right: 5,\n              left: 5\n            }\n          },\n          group: group,\n          eventListeners: {\n            click: function () {\n              self.showKPI = !self.showKPI;\n              tsInstance.resizeTo();\n            }\n          }\n        }),\n        id: 'id',\n        priority: 2\n      });\n\n      // self.createD3Buttons({\n      //   'expander': {\n      //     text: '>>',\n      //     config: {\n      //       margin: {\n      //         right: 2,\n      //         left: 2\n      //       }\n      //     },\n      //     group: group,\n      //     eventListeners: {\n      //       click: function () {\n      //         self.expand = !self.expand;\n      //         for (var key in self.btns) {\n      //           obj = self.btns[key];\n      //           /button/.test(key) && (self.expand ? obj.btn.hide() : obj.btn.show());\n      //         }\n      //         self.toolbar.redraw();\n      //       }\n      //     }\n      //   }\n      // });\n\n      // adding group and button group to toolbar\n      toolbar.addComponent(group);\n      self.toolbar = toolbar;\n      return toolbar;\n    };\n\n    addCssRules (classNames, styles) {\n      var key,\n        className,\n        paper = this.graphics.paper;\n      for (key in classNames) {\n        className = classNames[key];\n        switch (key) {\n          case 'container':\n            styles.container && paper.cssAddRule('.' + className, styles.container.style);\n            break;\n          case 'text':\n            styles.text && paper.cssAddRule('.' + className, styles.text.style);\n        }\n      }\n    };\n\n    addSymbols (symbolArr) {\n      var i, len,\n        group = this.group;\n\n      for (i = 0, len = symbolArr.length; i < len; i++) {\n        group.addSymbol(symbolArr[i].instance);\n      }\n    };\n\n    getLogicalSpace (availableWidth, availableHeight) {\n      var buttons = this.buttons,\n        minArr = this.componentArr,\n        minSpace,\n        maxSpace;\n\n      this.group.emptyList();\n      this.addSymbols(minArr);\n      minSpace = this.toolbar.getLogicalSpace(availableWidth, availableHeight);\n      console.log('minWidth', minSpace.width);\n      this.group.emptyList();\n\n      this.addSymbols(this.componentArr);\n\n      this.maxSpace = maxSpace = this.toolbar.getLogicalSpace(availableWidth, availableHeight);\n\n      return {\n        width: {\n          max: maxSpace.width,\n          min: minSpace.width\n        },\n        height: maxSpace.height\n      };\n    };\n\n    getSidePanelSpace (availableWidth, availableHeight) {\n      return {\n        width: this.showKPI ? 100 : 0,\n        height: this.showKPI ? 1 : 0\n      }\n    }\n\n    getModuleName () {\n      return 'ExpanderCollapser' + window.count;\n    }\n\n    placeInCanvas () {\n      var self = this;\n      self.spaceManagerInstance.add([{\n        name: function () {\n          return self.getModuleName();\n        },\n        ref: function (obj) {\n          return obj['0'];\n        },\n        self: function () {\n          return self;\n        },\n        priority: function () {\n          return 2;\n        },\n        layout: function (obj) {\n          return obj[self.config.layout];\n        },\n        orientation: [{\n          type: function (obj) {\n            return obj[self.config.orientation];\n          },\n          position: [{\n            type: function (obj) {\n              return obj[self.config.position];\n            },\n            alignment: [{\n              type: function (obj) {\n                return obj[self.config.alignment];\n              },\n              dimensions: [function () {\n                var parent = this.getParentComponentGroup();\n                return self.getLogicalSpace(parent.getWidth(), parent.getHeight());\n              }]\n            }]\n          }]\n        }]\n      }]);\n\n      self.spaceManagerInstance.add([{\n        name: function () {\n          return 'sidepanel'\n        },\n        ref: function (obj) {\n          return obj['0'];\n        },\n        self: function () {\n          return self;\n        },\n        priority: function () {\n          return 2;\n        },\n        layout: function (obj) {\n          return obj.block;\n        },\n        orientation: [{\n          type: function (obj) {\n            return obj.vertical;\n          },\n          position: [{\n            type: function (obj) {\n              return obj.right;\n            },\n            alignment: [{\n              type: function (obj) {\n                return obj.middle\n              },\n              dimensions: [function () {\n                var parent = this.getParentComponentGroup();\n                return self.getSidePanelSpace(parent.getWidth(), parent.getHeight());\n              }]\n            }]\n          }]\n        }]\n      }]);\n    };\n\n    setDrawingConfiguration (x, y, width, height, group) {\n      var mes = this.measurement;\n      mes.x = x;\n      mes.y = y;\n      mes.width = width;\n      mes.height = height;\n\n      this.parentGroup = group;\n\n      return this;\n    };\n\n    draw (x, y, width, height, group) {\n      let self = this,\n        measurement = self.measurement,\n        toolbar = self.toolbar,\n        list;\n\n      x = x === undefined ? measurement.x : x;\n      y = y === undefined ? measurement.y : y;\n      width = width === undefined ? measurement.width : width;\n      height = height === undefined ? measurement.height : height;\n      group = group === undefined ? self.parentGroup : group;\n      if (width && height) {\n        toolbar.draw(x, y, group);\n        this.showKPI ? this.drawPanel(x + width , y) : this.hidePanel();\n      }\n    };\n\n    drawPanel (x, y) {\n      var childStyle = {\n        left: '10px',\n        'font-weight': 'normal',\n        padding: '2px'\n      },\n      headStyleObj = {\n        padding: '10px',\n        'font-weight': 'bold'\n      };\n      var data = [{\n        head: {\n          text: ['Visible Data'],\n          style: headStyleObj\n        },\n        style: {\n          margin: '5px'\n        },\n        children: [{\n          text: ['Maximum', 30],\n          style: childStyle\n        },{\n          text: ['Minimum', 30],\n          style: childStyle\n        },{\n          text: ['Standard Deviation', 30],\n          style: childStyle\n        },{\n          text: ['Average', 30],\n          style: childStyle\n        }]\n      }, {\n        head: {\n          text: ['Full Data'],\n          style: headStyleObj\n        },\n        style: {\n          margin: '5px'\n        },\n        children: [{\n          text: ['Maximum', 30],\n          style: childStyle\n        },{\n          text: ['Minimum', 30],\n          style: childStyle\n        },{\n          text: ['Standard Deviation', 30],\n          style: childStyle\n        },{\n          text: ['Average', 30],\n          style: childStyle\n        }]\n      }];\n\n      var parent,\n        selection = d3.select(this.graphics.container)\n        .selectAll('.test')\n        .data([1]);\n\n      selection = selection\n      .enter()\n      .append('div')\n      .merge(selection)\n      .attr('class', 'test')\n      .style(\"left\", (x + \"px\"))\n      .style('position', 'absolute')\n      .style('display', 'block')\n      .style(\"top\", (y +\"px\"));\n\n      function createDIV(text, selection, cls, styleObj) {\n        var str = text.join(':'),\n          child = selection\n          .selectAll('.' + cls)\n          .data([1]);\n\n          child = child\n          .enter()\n          .append('div')\n          .merge(child)\n          .attr('class', cls)\n          .html(str)\n          .style('position', 'relative');\n\n\n          for (var obj in styleObj) {\n            child.style(obj, styleObj[obj]);\n          }\n\n          return child;\n        }\n\n      for (var i = 0, len = data.length; i < len; i += 1) {\n        createDIV([], selection, data[i].head.text[0] + '_container', data[i].style);\n        parent = createDIV(data[i].head.text, selection, data[i].head.text[0], data[i].head.style);\n        if (data[i].children) {\n          for (var j = 0, len1 = data[i].children.length; j < len1; j += 1) {\n            createDIV(data[i].children[j].text, parent, data[i].text + '_' + data[i].children[j].text[0], data[i].children[j].style);\n          }\n        }\n      }\n\n\n    }\n\n    hidePanel() {\n      d3.select(this.graphics.container)\n      .select('.test')\n      .remove();\n    }\n  }\n  return KPIIndicator;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/fcts-ext-sidepanel.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}