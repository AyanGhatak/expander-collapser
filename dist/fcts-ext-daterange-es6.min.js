(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:false };modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.loaded=true;return module.exports;}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.p="";return __webpack_require__(0);})([function(module,exports,__webpack_require__){module.exports=__webpack_require__(1);},function(module,exports,__webpack_require__){'use strict';const DateRange=__webpack_require__(2);;(function(factory){factory(FusionCharts)})(function(FC){FC.register('extension',['date-range-chooser',function(id){var global=this;var extAPI=global.extAPI;window.dr=new DateRange();extAPI(window.dr)}])});},function(module,exports,__webpack_require__){'use strict';var StartDateInput=__webpack_require__(3);var EndDateInput=__webpack_require__(5);class DateRange{constructor(){this.startDt=0;this.endDt=0;this.startText={attr:function(){}};this.endText={attr:function(){}}}get startDate(){return this.startDt}set startDate(startDt){if(startDt<=this.endDt){this.startDt=startDt;var formattedStartDate=this.getFormattedDate(this.startDt);this.startText.attr('text',formattedStartDate);var sdi=new StartDateInput();sdi.timestamp=this.startDt}}get endDate(){return this.endDt}set endDate(endDt){if(endDt>=this.startDt){this.endDt=endDt;var formattedEndDate=this.getFormattedDate(this.endDt);this.endText.attr('text',formattedEndDate);var edi=new EndDateInput();edi.timestamp=this.endDt}}init(require){var self=this;require('X-Axis','graphics','chart',function(x,graphics,chart){self.x=x;self.paper=graphics;self.chart=chart})}placeInCanvas(){this.range={startDate:12,endDate:23}}draw(){var paper=this.paper;var startLabel=paper.text(20,22,'From: ');startLabel.attr('font-family','sans-serif');startLabel.attr('fill','#000');var startRect=paper.rect(50,10,90,25);startRect.attr('stroke','#000');this.startText=paper.text(95,22,this.getFormattedDate(this.startDt));this.startText.attr('font-family','sans-serif');this.startText.attr('fill','#000');var endLabel=paper.text(170,22,'To: ');endLabel.attr('font-family','sans-serif');endLabel.attr('fill','#000');var endRect=paper.rect(190,10,90,25);endRect.attr('stroke','#000');this.endText=paper.text(235,22,this.getFormattedDate(this.endDt));this.endText.attr('font-family','sans-serif');this.endText.attr('fill','#000')}dispose(){}swapDates(){let temp=this.dateRange.startDate;this.dateRange.startDate=this.dateRange.endDate;this.dateRange.endDate=temp}syncRange(){}getFormattedDate(timestamp){return this.chart.getFormattedDate(timestamp)}getTimestamp(dateString){return this.chart.getTimestamp(dateString)}setConfig(configObj){}getConfig(){return{calendarVisible:'false'}}}module.exports=DateRange;},function(module,exports,__webpack_require__){'use strict';const DateInput=__webpack_require__(4);class StartDateInput extends DateInput{validateDate(timestamp){return true}}module.exports=StartDateInput;},function(module,exports){'use strict';class DateInput{constructor(){this.timestamp=0}get date(){return this.timestamp}set date(ms){this.timestamp=ms}displayDate(){}}module.exports=DateInput;},function(module,exports,__webpack_require__){'use strict';const DateInput=__webpack_require__(4);class EndDateInput extends DateInput{validateDate(timestamp){return true}}module.exports=EndDateInput;}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,