/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const DateRange = __webpack_require__(1);
	const StartDateInput = __webpack_require__(2);
	const EndDateInput = __webpack_require__(4);
	const FusionCharts = __webpack_require__(5);
	
	var fc = new FusionCharts();
	
	fc.register('extension', ['date-range-chooser', function (id) {
	  var global = this;
	  var extAPI = global.extAPI;
	  console.log(id);
	
	  // var otherAPI = fc.getExtComponent(id, 'api', 'legacyextapi');
	  // var toolBoxApi = fc.getComponent('api', 'toolbox');
	
	  extAPI({
	    init: function (require) {
	      require('X-Axis', 'Y-Axis', function (x, y) {
	        global.x = x;
	        global.y = y;
	      });
	    },
	    placeInCanvas: function () {
	      // space management
	      var dateRange = new DateRange();
	      dateRange.range = {
	        startDate: 12,
	        endDate: 23
	      };
	      var stDtInp = new StartDateInput();
	      console.log(stDtInp.startDate);
	      var endDtInp = new EndDateInput();
	      console.log(endDtInp.endDate);
	    },
	    draw: function () {
	      // draw extension
	    },
	    dispose: function () {
	      // dispose extension
	    }
	  });
	}]);


/***/ },
/* 1 */
/***/ function(module, exports) {

	'use strict';
	/**
	 * Class representing the DateRange.
	 */
	class DateRange {
	  /**
	   * Create a DateRange.
	   * @typedef {object} DateRange.range
	   * @property {number} startDate - The start date of the date range.
	   * @property {number} endDate - The end date of the date range.
	   */
	  constructor () {
	    /**
	     * @private
	     */
	    this.dateRange = {
	      startDate: 0,
	      endDate: 0
	    };
	  }
	
	  /**
	   * An object representing the start and end dates.
	   * @type {DateRange.range}
	   */
	  get range () {
	    return this.dateRange;
	  }
	
	  set range (range) {
	    if (range.startDate <= range.endDate) {
	      this.dateRange.startDate = range.startDate;
	      this.dateRange.endDate = range.endDate;
	    }
	  }
	
	  /**
	   * Swaps the start date and the end date of the date range
	   */
	  swapDates () {
	    let temp = this.dateRange.startDate;
	    this.dateRange.startDate = this.dateRange.endDate;
	    this.dateRange.endDate = temp;
	  }
	}
	
	module.exports = DateRange;


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const DateInput = __webpack_require__(3);
	
	/**
	 * A concrete representation of DateInput for the start date.
	 * @extends DateInput
	 * @private
	 */
	class StartDateInput extends DateInput {
	  constructor () {
	    super();
	    /**
	     * @private
	     */
	    this.date = '01/01/1970';
	  }
	
	  /**
	   * The starting date of the TimeSeries chart.
	   * @type string
	   */
	  get startDate () {
	    return this.date;
	  }
	
	  set startDate (dateStr) {
	    this.date = dateStr;
	  }
	}
	
	module.exports = StartDateInput;


/***/ },
/* 3 */
/***/ function(module, exports) {

	'use strict';
	/**
	 * Class representing a abstract DateInput.
	 * @abstract
	 * @private
	 */
	class DateInput {
	  constructor () {
	    /**
	     * @typedef {object} DateInput.input
	     * @property {number} timestamp - The current time shown on the date input.
	     */
	    /**
	     * @private
	     */
	    this.time = 0;
	  }
	
	  /**
	   * Represents the numeric value of the date
	   * @type number
	   */
	  get timestamp () {
	    return this.time;
	  }
	
	  set timestamp (ms) {
	    this.time = ms;
	  }
	}
	
	module.exports = DateInput;


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	const DateInput = __webpack_require__(3);
	
	/**
	 * A concrete representation of DateInput for the end date.
	 * @extends DateInput
	 * @private
	 */
	class EndDateInput extends DateInput {
	  constructor () {
	    super();
	    /**
	     * @private
	     */
	    this.date = '01/01/1970';
	  }
	
	  /**
	   * The ending date of the TimeSeries chart.
	   * @type string
	   */
	  get endDate () {
	    return this.date;
	  }
	
	  set endDate (dateStr) {
	    this.date = dateStr;
	  }
	}
	
	module.exports = EndDateInput;


/***/ },
/* 5 */
/***/ function(module, exports) {

	'use strict';
	var FusionCharts = function () {};
	
	FusionCharts.prototype.register = function (ext, arr) {
	  var extName = arr[0];
	  var fn = arr[1];
	  console.log('Currently active extension: ' + extName);
	  fn.bind(this, 565)();
	};
	
	FusionCharts.prototype.getComponent = function (componentType, componentName) {
	  var toolBox = {
	    x: 24,
	    y: 56,
	    width: 100,
	    height: 20,
	    index: 4
	  };
	
	  if (componentType === 'api' && componentName === 'toolbox') {
	    return toolBox;
	  }
	
	  return null;
	};
	
	FusionCharts.prototype.extAPI = function (obj) {
	  obj.init(function () {
	    var argsToApply = [];
	    var cb = arguments[arguments.length - 1];
	
	    for (var i = 0; i < arguments.length - 1; i++) {
	      if (arguments[i] === 'X-Axis') {
	        argsToApply.push(156772);
	      } else if (arguments[i] === 'Y-Axis') {
	        argsToApply.push(156765);
	      }
	    }
	    cb.apply(this, argsToApply);
	  });
	
	  obj.placeInCanvas();
	
	  obj.draw();
	
	  obj.dispose();
	};
	
	module.exports = FusionCharts;


/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,