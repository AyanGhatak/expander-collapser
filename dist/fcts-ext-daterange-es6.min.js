(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:false };modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.loaded=true;return module.exports;}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.p="";return __webpack_require__(0);})([function(module,exports,__webpack_require__){module.exports=__webpack_require__(1);},function(module,exports,__webpack_require__){'use strict';const DateRange=__webpack_require__(2);const StartDateInput=__webpack_require__(3);const EndDateInput=__webpack_require__(5);const FusionCharts=__webpack_require__(6);FusionCharts.register('extension',['date-range-chooser',function(id){var global=this;var extAPI=global.extAPI;console.log(id);extAPI({init:function(require){require('X-Axis','Y-Axis',function(x,y){global.x=x;global.y=y})},placeInCanvas:function(){var dateRange=new DateRange();dateRange.range={startDate:12,endDate:23};var stDtInp=new StartDateInput();console.log(stDtInp.startDate);var endDtInp=new EndDateInput();console.log(endDtInp.endDate)},draw:function(){},dispose:function(){}})}]);},function(module,exports){'use strict';class DateRange{constructor(){this.dateRange={startDate:0,endDate:0}}get range(){return this.dateRange}set range(range){if(range.startDate<=range.endDate){this.dateRange.startDate=range.startDate;this.dateRange.endDate=range.endDate}}swapDates(){let temp=this.dateRange.startDate;this.dateRange.startDate=this.dateRange.endDate;this.dateRange.endDate=temp}}module.exports=DateRange;},function(module,exports,__webpack_require__){'use strict';const DateInput=__webpack_require__(4);class StartDateInput extends DateInput{constructor(){super();this.date='01/01/1970'}get startDate(){return this.date}set startDate(dateStr){this.date=dateStr}}module.exports=StartDateInput;},function(module,exports){'use strict';class DateInput{constructor(){this.time=0}get timestamp(){return this.time}set timestamp(ms){this.time=ms}}module.exports=DateInput;},function(module,exports,__webpack_require__){'use strict';const DateInput=__webpack_require__(4);class EndDateInput extends DateInput{constructor(){super();this.date='01/01/1970'}get endDate(){return this.date}set endDate(dateStr){this.date=dateStr}}module.exports=EndDateInput;},function(module,exports){'use strict';var FusionCharts=function(){};FusionCharts.register=function(ext,arr){var extName=arr[0];var fn=arr[1];console.log('Currently active extension: '+extName);fn.bind(this,565)()};FusionCharts.getComponent=function(componentType,componentName){var toolBox={x:24,y:56,width:100,height:20,index:4};if(componentType==='api'&&componentName==='toolbox'){return toolBox}return null};FusionCharts.extAPI=function(obj){obj.init(function(){var argsToApply=[];var cb=arguments[arguments.length-1];for(var i=0;i<arguments.length-1;i+=1){if(arguments[i]==='X-Axis'){argsToApply.push(156772)}else if(arguments[i]==='Y-Axis'){argsToApply.push(156765)}}cb.apply(this,argsToApply)});obj.placeInCanvas();obj.draw();obj.dispose()};module.exports=FusionCharts;}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,