(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:false };modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.loaded=true;return module.exports;}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.p="";return __webpack_require__(0);})([function(module,exports,__webpack_require__){module.exports=__webpack_require__(1);},function(module,exports,__webpack_require__){'use strict';const DateRange=__webpack_require__(2);FusionCharts.register('extension',['date-range-chooser',function(id){var global=this;var extAPI=global.extAPI;window.dr=new DateRange();extAPI(window.dr)}]);},function(module,exports,__webpack_require__){(function(global){'use strict';var StartDateInput=__webpack_require__(3);var EndDateInput=__webpack_require__(5);class DateRange{constructor(){this.dateRange={startDate:0,endDate:0};this.startText={attr:function(){}};this.endText={attr:function(){}}}get range(){return this.dateRange}set range(range){if(range.startDate<=range.endDate){this.dateRange.startDate=range.startDate;this.dateRange.endDate=range.endDate;var sdi=new StartDateInput();sdi.timestamp=this.dateRange.startDate;this.startText.attr('text',sdi.timestamp);var edi=new EndDateInput();edi.timestamp=this.dateRange.endDate;this.endText.attr('text',edi.timestamp)}}init(require){require('X-Axis','Y-Axis','graphics',function(x,y,graphics){global.x=x;global.y=y;global.paper=graphics})}placeInCanvas(){this.range={startDate:12,endDate:23}}draw(){var paper=global.paper;var range=this.range;var startLabel=paper.text(20,22,'From: ');startLabel.attr('font-family','sans-serif');startLabel.attr('fill','#000');var startRect=paper.rect(50,10,60,25);startRect.attr('stroke','#000');this.startText=paper.text(63,22,range.startDate);this.startText.attr('font-family','sans-serif');this.startText.attr('fill','#000');var endLabel=paper.text(170,22,'To: ');endLabel.attr('font-family','sans-serif');endLabel.attr('fill','#000');var endRect=paper.rect(190,10,60,25);endRect.attr('stroke','#000');this.endText=paper.text(203,22,range.endDate);this.endText.attr('font-family','sans-serif');this.endText.attr('fill','#000')}dispose(){}swapDates(){let temp=this.dateRange.startDate;this.dateRange.startDate=this.dateRange.endDate;this.dateRange.endDate=temp}syncRange(){}getFormattedDate(timestamp){return '12/12/2012'}getTimestamp(dateString){return 6745123}setConfig(configObj){}getConfig(){return{color:'#000000'}}}module.exports=DateRange;}.call(exports,(function(){return this}())));},function(module,exports,__webpack_require__){'use strict';const DateInput=__webpack_require__(4);class StartDateInput extends DateInput{validateDate(timestamp){return true}}module.exports=StartDateInput;},function(module,exports){'use strict';class DateInput{constructor(){this.timestamp=0}get date(){return this.timestamp}set date(ms){this.timestamp=ms}displayDate(){}}module.exports=DateInput;},function(module,exports,__webpack_require__){'use strict';const DateInput=__webpack_require__(4);class EndDateInput extends DateInput{validateDate(timestamp){return true}}module.exports=EndDateInput;}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,