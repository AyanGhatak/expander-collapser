(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:false };modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.loaded=true;return module.exports;}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.p="";return __webpack_require__(0);})([function(module,exports,__webpack_require__){module.exports=__webpack_require__(1);},function(module,exports,__webpack_require__){'use strict';const DateRange=__webpack_require__(2);;(function(factory){factory(FusionCharts)})(function(FC){FusionCharts.register('extension',['date-range-chooser',function(id){var global=this;var extAPI=global.extAPI;window.dr=new DateRange();extAPI(window.dr)}])});},function(module,exports,__webpack_require__){'use strict';var StartDateInput=__webpack_require__(3);var EndDateInput=__webpack_require__(5);var FusionCharts=__webpack_require__(6);class DateRange{constructor(){this.dateRange={startDate:0,endDate:0};this.startText={attr:function(){}};this.endText={attr:function(){}}}get range(){return this.dateRange}set range(range){if(range.startDate<=range.endDate){this.dateRange.startDate=range.startDate;var formattedStartDate=this.getFormattedDate(range.startDate);this.startText.attr('text',formattedStartDate);this.dateRange.endDate=range.endDate;var formattedEndDate=this.getFormattedDate(range.endDate);this.endText.attr('text',formattedEndDate);var sdi=new StartDateInput();sdi.timestamp=this.dateRange.startDate;var edi=new EndDateInput();edi.timestamp=this.dateRange.endDate}}init(require){var self=this;if(typeof require==='function'){require('X-Axis','Y-Axis','graphics','chart',function(x,y,graphics,chart){self.x=x;self.y=y;self.paper=graphics;self.chart=chart})}else{self.chart=new FusionCharts()}}placeInCanvas(){this.range={startDate:12,endDate:23}}draw(){var paper=this.paper;var range=this.range;var startLabel=paper.text(20,22,'From: ');startLabel.attr('font-family','sans-serif');startLabel.attr('fill','#000');var startRect=paper.rect(50,10,90,25);startRect.attr('stroke','#000');this.startText=paper.text(95,22,this.getFormattedDate(range.startDate));this.startText.attr('font-family','sans-serif');this.startText.attr('fill','#000');var endLabel=paper.text(170,22,'To: ');endLabel.attr('font-family','sans-serif');endLabel.attr('fill','#000');var endRect=paper.rect(190,10,90,25);endRect.attr('stroke','#000');this.endText=paper.text(235,22,this.getFormattedDate(range.endDate));this.endText.attr('font-family','sans-serif');this.endText.attr('fill','#000')}dispose(){}swapDates(){let temp=this.dateRange.startDate;this.dateRange.startDate=this.dateRange.endDate;this.dateRange.endDate=temp}syncRange(){}getFormattedDate(timestamp){return this.chart.getFormattedDate(timestamp)}getTimestamp(dateString){return this.chart.getTimestamp(dateString)}setConfig(configObj){}getConfig(){return{calendarVisible:'false'}}}module.exports=DateRange;},function(module,exports,__webpack_require__){'use strict';const DateInput=__webpack_require__(4);class StartDateInput extends DateInput{validateDate(timestamp){return true}}module.exports=StartDateInput;},function(module,exports){'use strict';class DateInput{constructor(){this.timestamp=0}get date(){return this.timestamp}set date(ms){this.timestamp=ms}displayDate(){}}module.exports=DateInput;},function(module,exports,__webpack_require__){'use strict';const DateInput=__webpack_require__(4);class EndDateInput extends DateInput{validateDate(timestamp){return true}}module.exports=EndDateInput;},function(module,exports){'use strict';var FusionCharts=function(){};FusionCharts.register=function(ext,arr){var fn=arr[1];fn.bind(this,565)()};FusionCharts.prototype.getFormattedDate=function(timestamp){return new Date(timestamp).toLocaleDateString()};FusionCharts.prototype.getTimestamp=function(date){var dt=new Date(date);return+new Date(dt.toLocaleDateString())};FusionCharts.getComponent=function(componentType,componentName){var toolBox={x:24,y:56,width:100,height:20,index:4};if(componentType==='api'&&componentName==='toolbox'){return toolBox}return null};FusionCharts.extAPI=function(obj){obj.init(function(){var argsToApply=[];var cb=arguments[arguments.length-1];for(var i=0;i<arguments.length-1;i+=1){if(arguments[i]==='X-Axis'){argsToApply.push(156772)}else if(arguments[i]==='Y-Axis'){argsToApply.push(156765)}else if(arguments[i]==='graphics'){var paper=Raphael(10,50,500,500);argsToApply.push(paper)}else if(arguments[i]==='chart'){argsToApply.push(new FusionCharts())}}cb.apply(this,argsToApply)});obj.placeInCanvas();obj.draw();obj.dispose()};if(typeof module!=='undefined'&&typeof module.exports!=='undefined'){module.exports=FusionCharts}else{window.FusionCharts=FusionCharts}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,