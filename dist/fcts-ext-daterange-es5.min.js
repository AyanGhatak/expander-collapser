!function(t){function e(o){if(a[o])return a[o].exports;var n=a[o]={exports:{},id:o,loaded:!1};return t[o].call(n.exports,n,n.exports,e),n.loaded=!0,n.exports}var a={};return e.m=t,e.c=a,e.p="",e(0)}([function(t,e,a){(function(t){"use strict";var e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=a(2);window.dr=new o,function(a,o){"object"===e(t)&&t.exports?t.exports=a.document?o(a):function(t){if(!t.document)throw new Error("Window with document not present");return o(t,!0)}:a.DateRangeChooser=o(a,!0)}("undefined"!=typeof window?window:void 0,function(t,e){var a=t.FusionCharts;a.register("extension",["private","DateRangeChooser",function(){a.registerComponent("extensions","DateRangeChooser",o)}])})}).call(e,a(1)(t))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children=[],t.webpackPolyfill=1),t}},function(t,e){"use strict";function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var o=function(){function t(t,e){for(var a=0;a<e.length;a++){var o=e[a];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,a,o){return a&&t(e.prototype,a),o&&t(e,o),e}}(),n=function(){function t(){a(this,t),this.startDt=0,this.endDt=0,this.startDataset=0,this.endDataset=0,"function"==typeof Fusioncharts&&(this.toolbox=FusionCharts.getComponent("api","toolbox"),this.HorizontalToolbar=this.toolbox.HorizontalToolbar,this.ComponentGroup=this.toolbox.ComponentGroup,this.SymbolStore=this.toolbox.SymbolStore),this.startText={attr:function(){}},this.endText={attr:function(){}}}return o(t,[{key:"swapDates",value:function(){var t=this.dateRange.startDate;this.dateRange.startDate=this.dateRange.endDate,this.dateRange.endDate=t}},{key:"syncRange",value:function(){}},{key:"getFormattedDate",value:function(t){return this.chart.getFormattedDate(t)}},{key:"getTimestamp",value:function(t){return this.chart.getTimestamp(t)}},{key:"setConfig",value:function(t){}},{key:"getConfig",value:function(){return{calendarVisible:"false"}}},{key:"init",value:function(t){var e=this;return t(["xAxis","yAxis","graphics","chart","dataset","PlotManager","canvasConfig","MarkerManager","reactiveModel","globalReactiveModel","spaceManagerInstance","smartLabel","chartInstance",function(t,a,o,n,i,r,s,l,h,c,u,d){e.xAxis=t,e.yAxis=a,e.graphics=o,e.chart=n,e.dataset=i,e.plotManager=r,e.markerManager=l,e.canvasConfig=s,e.reactiveModel=h,e.globalReactiveModel=c,e.spaceManagerInstance=u,e.smartLabel=d}]),this.spaceManagerInstance=e.spaceManagerInstance,this.globalReactiveModel=e.globalReactiveModel,this.startDt=e.globalReactiveModel.model["x-axis-visible-range-start"],this.endDt=e.globalReactiveModel.model["x-axis-visible-range-end"],this.startDataset=e.globalReactiveModel.model["x-axis-absolute-range-start"],this.endDataset=e.globalReactiveModel.model["x-axis-absolute-range-end"],this.toolbars=[],this.measurement={},this.toolbars.push(this.createToolbar()),this}},{key:"createToolbar",value:function(){var t,e,a,o,n,i,r=this;return r.fromDate={},r.toDate={},n=new Date(this.startDt).toLocaleDateString(),i=new Date(this.endDt).toLocaleDateString(),t=new this.HorizontalToolbar({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),t.setConfig({fill:"#fff",borderThickness:0}),o=new this.toolbox.ComponentGroup({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),o.setConfig({fill:"#fff",borderThickness:0}),e=new this.toolbox.Label("From:",{smartLabel:this.smartLabel,paper:this.graphics.paper},{text:{style:{"font-size":"15",fontFamily:"MyriadPro"}}}),r.fromDate=new this.toolbox.InputTextBoxSymbol({width:120,height:25},{paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container},{strokeWidth:1,stroke:"rgba(102,102,102,0.5)",symbolStrokeWidth:0,btnTextStyle:{fontSize:14},label:n}),a=new this.toolbox.Label("To:",{smartLabel:this.smartLabel,paper:this.graphics.paper},{text:{style:{"font-size":"15",fontFamily:"MyriadPro"}}}),r.toDate=new this.toolbox.InputTextBoxSymbol({width:120,height:25},{paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container},{strokeWidth:1,stroke:"rgba(102,102,102,0.5)",symbolStrokeWidth:0,btnTextStyle:{fontSize:14},label:i}),r.fromDate.attachEventHandlers({click:{fn:r.fromDate.edit},textOnBlur:function(){r.fromDate.blur(),r.startDate=r.fromDate.getText(),console.log(r.fromDate.getText())}}),r.toDate.attachEventHandlers({click:{fn:r.toDate.edit},textOnBlur:function(){r.toDate.blur(),console.log(r.toDate.getText()),r.endDate=r.toDate.getText()}}),this.SymbolStore.register("textBoxIcon",function(t,e,a,o,n,i,r){var s=t-o/2+i/2,l=t+o/2-i/2,h=e-n/2+r/2,c=e+n/2-r/2;return["M",s,h,"L",l,h,"L",l,c,"L",s,c,"Z"]}),o.addSymbol(e),o.addSymbol(r.fromDate),o.addSymbol(a),o.addSymbol(r.toDate),t.addComponent(o),t}},{key:"getLogicalSpace",value:function(t,e){t/=2;var a,o,n,i=0,r=0;for(o=0,n=this.toolbars.length;o<n;o++)a=this.toolbars[o].getLogicalSpace(),i=Math.max(a.width,i),r+=a.height,this.toolbars[o].width=a.width,this.toolbars[o].height=a.height;return r+=this.padding,{width:i>t?0:i,height:r>e?0:r}}},{key:"placeInCanvas",value:function(){var t=this;t.padding=5,t.spaceManagerInstance.add([{name:function(){return"ToolBoxExt"},ref:function(t){return t[0]},self:function(){return t},priority:function(){return 2},layout:function(t){return t.inline},orientation:[{type:function(t){return t.horizontal},position:[{type:function(t){return t.top},alignment:[{type:function(t){return t.left},dimensions:[function(){var e=this.getParentComponentGroup();return t.getLogicalSpace(e.getWidth(),e.getHeight())}]}]}]}]}])}},{key:"setDrawingConfiguration",value:function(t,e,a,o,n){var i=this.measurement;return i.x=t,i.y=e,i.width=a,i.height=o,this.parentGroup=n,this}},{key:"draw",value:function(t,e,a,o,n){var i,r,s,l=this.measurement,h=this.toolbars,c=this.globalReactiveModel,u=this;if(console.log(c),t=void 0===t?l.x:t,e=void 0===e?l.y:e,a=void 0===a?l.width:a,o=void 0===o?l.height:o,n=void 0===n?this.parentGroup:n,a&&o)for(r=0,i=h.length;r<i;r++)s=h[r],s.draw(t,e);c.onPropsChange(["x-axis-visible-range-start","x-axis-visible-range-end"],function(t,e){u.fromDate.blur(new Date(t[1]).toLocaleDateString()),u.toDate.blur(new Date(e[1]).toLocaleDateString())})}},{key:"startDate",get:function(){return this.startDt},set:function(t){var e=+new Date(t);e<=this.endDt&&(this.startDt=e,this.globalReactiveModel.model["x-axis-visible-range-start"]=this.startDt)}},{key:"endDate",get:function(){return this.endDt},set:function(t){var e=+new Date(t);e>=this.startDt&&(this.endDt=e,this.globalReactiveModel.model["x-axis-visible-range-end"]=this.endDt)}}]),t}();"undefined"!=typeof t&&"undefined"!=typeof t.exports?t.exports=n:window.StandardPeriod=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,