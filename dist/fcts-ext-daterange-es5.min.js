!function(t){function e(n){if(a[n])return a[n].exports;var r=a[n]={exports:{},id:n,loaded:!1};return t[n].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var a={};return e.m=t,e.c=a,e.p="",e(0)}([function(t,e,a){"use strict";var n=a(1);window.dr=new n},function(t,e){"use strict";function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var n=function(){function t(t,e){for(var a=0;a<e.length;a++){var n=e[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,a,n){return a&&t(e.prototype,a),n&&t(e,n),e}}(),r=function(){function t(){a(this,t),this.startDt=0,this.endDt=0,this.startText={attr:function(){}},this.endText={attr:function(){}}}return n(t,[{key:"init",value:function(t){var e=this;t("X-Axis","graphics","chart",function(t,a,n){e.x=t,e.paper=a,e.chart=n})}},{key:"placeInCanvas",value:function(){this.range={startDate:12,endDate:23}}},{key:"draw",value:function(){var t=this.paper,e=t.text(20,22,"From: ");e.attr("font-family","sans-serif"),e.attr("fill","#000");var a=t.rect(50,10,90,25);a.attr("stroke","#000"),this.startText=t.text(95,22,this.getFormattedDate(this.startDate)),this.startText.attr("font-family","sans-serif"),this.startText.attr("fill","#000");var n=t.text(170,22,"To: ");n.attr("font-family","sans-serif"),n.attr("fill","#000");var r=t.rect(190,10,90,25);r.attr("stroke","#000"),this.endText=t.text(235,22,this.getFormattedDate(this.endDate)),this.endText.attr("font-family","sans-serif"),this.endText.attr("fill","#000")}},{key:"dispose",value:function(){}},{key:"swapDates",value:function(){var t=this.dateRange.startDate;this.dateRange.startDate=this.dateRange.endDate,this.dateRange.endDate=t}},{key:"syncRange",value:function(){}},{key:"getFormattedDate",value:function(t){return this.chart.getFormattedDate(t)}},{key:"getTimestamp",value:function(t){return this.chart.getTimestamp(t)}},{key:"setConfig",value:function(t){}},{key:"getConfig",value:function(){return{calendarVisible:"false"}}},{key:"startDate",get:function(){return this.startDt},set:function(t){var e=+new Date(t);e<=this.endDt&&(this.startDt=e,console.log(this.startDt))}},{key:"endDate",get:function(){return this.endDt},set:function(t){var e=+new Date(t);e>=this.startDt&&(this.endDt=e,console.log(this.endDt))}}]),t}();t.exports=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,