!function(t){function e(r){if(n[r])return n[r].exports;var a=n[r]={exports:{},id:r,loaded:!1};return t[r].call(a.exports,a,a.exports,e),a.loaded=!0,a.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";var r=n(1);!function(t){t(FusionCharts)}(function(t){FusionCharts.register("extension",["date-range-chooser",function(t){var e=this,n=e.extAPI;window.dr=new r,n(window.dr)}])})},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(2),o=n(4),s=n(5),u=function(){function t(){r(this,t),this.dateRange={startDate:0,endDate:0},this.startText={attr:function(){}},this.endText={attr:function(){}}}return a(t,[{key:"init",value:function(t){var e=this;"function"==typeof t?t("X-Axis","Y-Axis","graphics","chart",function(t,n,r,a){e.x=t,e.y=n,e.paper=r,e.chart=a}):e.chart=new s}},{key:"placeInCanvas",value:function(){this.range={startDate:12,endDate:23}}},{key:"draw",value:function(){var t=this.paper,e=this.range,n=t.text(20,22,"From: ");n.attr("font-family","sans-serif"),n.attr("fill","#000");var r=t.rect(50,10,90,25);r.attr("stroke","#000"),this.startText=t.text(95,22,this.getFormattedDate(e.startDate)),this.startText.attr("font-family","sans-serif"),this.startText.attr("fill","#000");var a=t.text(170,22,"To: ");a.attr("font-family","sans-serif"),a.attr("fill","#000");var i=t.rect(190,10,90,25);i.attr("stroke","#000"),this.endText=t.text(235,22,this.getFormattedDate(e.endDate)),this.endText.attr("font-family","sans-serif"),this.endText.attr("fill","#000")}},{key:"dispose",value:function(){}},{key:"swapDates",value:function(){var t=this.dateRange.startDate;this.dateRange.startDate=this.dateRange.endDate,this.dateRange.endDate=t}},{key:"syncRange",value:function(){}},{key:"getFormattedDate",value:function(t){return this.chart.getFormattedDate(t)}},{key:"getTimestamp",value:function(t){return this.chart.getTimestamp(t)}},{key:"setConfig",value:function(t){}},{key:"getConfig",value:function(){return{calendarVisible:"false"}}},{key:"range",get:function(){return this.dateRange},set:function(t){if(t.startDate<=t.endDate){this.dateRange.startDate=t.startDate;var e=this.getFormattedDate(t.startDate);this.startText.attr("text",e),this.dateRange.endDate=t.endDate;var n=this.getFormattedDate(t.endDate);this.endText.attr("text",n);var r=new i;r.timestamp=this.dateRange.startDate;var a=new o;a.timestamp=this.dateRange.endDate}}}]),t}();t.exports=u},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n(3),u=function(t){function e(){return r(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return i(e,t),o(e,[{key:"validateDate",value:function(t){return!0}}]),e}(s);t.exports=u},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=function(){function t(){n(this,t),this.timestamp=0}return r(t,[{key:"displayDate",value:function(){}},{key:"date",get:function(){return this.timestamp},set:function(t){this.timestamp=t}}]),t}();t.exports=a},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n(3),u=function(t){function e(){return r(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return i(e,t),o(e,[{key:"validateDate",value:function(t){return!0}}]),e}(s);t.exports=u},function(t,e){"use strict";var n=function(){};n.register=function(t,e){var n=e[1];n.bind(this,565)()},n.prototype.getFormattedDate=function(t){return new Date(t).toLocaleDateString()},n.prototype.getTimestamp=function(t){var e=new Date(t);return+new Date(e.toLocaleDateString())},n.getComponent=function(t,e){var n={x:24,y:56,width:100,height:20,index:4};return"api"===t&&"toolbox"===e?n:null},n.extAPI=function(t){t.init(function(){for(var t=[],e=arguments[arguments.length-1],r=0;r<arguments.length-1;r++)if("X-Axis"===arguments[r])t.push(156772);else if("Y-Axis"===arguments[r])t.push(156765);else if("graphics"===arguments[r]){var a=Raphael(10,50,500,500);t.push(a)}else"chart"===arguments[r]&&t.push(new n);e.apply(this,t)}),t.placeInCanvas(),t.draw(),t.dispose()},"undefined"!=typeof t&&"undefined"!=typeof t.exports?t.exports=n:window.FusionCharts=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,