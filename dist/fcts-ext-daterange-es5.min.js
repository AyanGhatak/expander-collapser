!function(t){function e(n){if(a[n])return a[n].exports;var o=a[n]={exports:{},id:n,loaded:!1};return t[n].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var a={};return e.m=t,e.c=a,e.p="",e(0)}([function(t,e,a){(function(t){"use strict";var e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n=a(2);window.dr=new n,function(a,n){"object"===e(t)&&t.exports?t.exports=a.document?n(a):function(t){if(!t.document)throw new Error("Window with document not present");return n(t,!0)}:a.DateRangeChooser=n(a,!0)}("undefined"!=typeof window?window:void 0,function(t,e){var a=t.FusionCharts;a.register("extension",["private","DateRangeChooser",function(){a.registerComponent("extensions","DateRangeChooser",n({FusionCharts:a}))}])})}).call(e,a(1)(t))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children=[],t.webpackPolyfill=1),t}},function(t,e){"use strict";function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var n=function(){function t(t,e){for(var a=0;a<e.length;a++){var n=e[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,a,n){return a&&t(e.prototype,a),n&&t(e,n),e}}();t.exports=function(t){var e=function(){function e(){a(this,e),this.startDt=0,this.endDt=0,this.startDataset=0,this.endDataset=0,this.toolbox=t.FusionCharts.getComponent("api","toolbox"),this.HorizontalToolbar=this.toolbox.HorizontalToolbar,this.ComponentGroup=this.toolbox.ComponentGroup,this.SymbolStore=this.toolbox.SymbolStore,this.startText={attr:function(){}},this.endText={attr:function(){}}}return n(e,[{key:"dateFormatter",value:function(t,e){t=new Date(t);var a=[t.getUTCDate(),t.getUTCMonth()+1,t.getUTCFullYear()];return a=a.join(e)}},{key:"swapDates",value:function(){var t=this.dateRange.startDate;this.dateRange.startDate=this.dateRange.endDate,this.dateRange.endDate=t}},{key:"syncRange",value:function(){}},{key:"getFormattedDate",value:function(t){return this.chart.getFormattedDate(t)}},{key:"getTimestamp",value:function(t){return this.chart.getTimestamp(t)}},{key:"setConfig",value:function(t){}},{key:"getConfig",value:function(){return{calendarVisible:"false"}}},{key:"init",value:function(t){var e=this;return t(["xAxis","yAxis","graphics","chart","dataset","PlotManager","canvasConfig","MarkerManager","reactiveModel","globalReactiveModel","spaceManagerInstance","smartLabel","chartInstance",function(t,a,n,o,r,i,s,l,h,c,u,d){e.xAxis=t,e.yAxis=a,e.graphics=n,e.chart=o,e.dataset=r,e.plotManager=i,e.markerManager=l,e.canvasConfig=s,e.reactiveModel=h,e.globalReactiveModel=c,e.spaceManagerInstance=u,e.smartLabel=d}]),this.spaceManagerInstance=e.spaceManagerInstance,this.globalReactiveModel=e.globalReactiveModel,this.startDt=e.globalReactiveModel.model["x-axis-visible-range-start"],this.endDt=e.globalReactiveModel.model["x-axis-visible-range-end"],this.startDataset=e.globalReactiveModel.model["x-axis-absolute-range-start"],this.endDataset=e.globalReactiveModel.model["x-axis-absolute-range-end"],this.toolbars=[],this.measurement={},this.toolbars.push(this.createToolbar()),this}},{key:"createToolbar",value:function(){var t,e,a,n,o,r,i=this;return i.fromDate={},i.toDate={},o=i.dateFormatter(new Date(this.startDt),"-"),r=i.dateFormatter(new Date(this.endDt),"-"),t=new this.HorizontalToolbar({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),t.setConfig({fill:"#fff",borderThickness:0}),n=new this.toolbox.ComponentGroup({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),n.setConfig({fill:"#fff",borderThickness:0}),e=new this.toolbox.Label("From:",{smartLabel:this.smartLabel,paper:this.graphics.paper},{text:{style:{"font-size":"15","font-family":"MyriadPro",fill:"#696969"}}}),a=new this.toolbox.Label("To:",{smartLabel:this.smartLabel,paper:this.graphics.paper},{text:{style:{"font-size":"15","font-family":"MyriadPro",fill:"#696969"}}}),i.fromDate=new this.toolbox.InputTextBoxSymbol({width:120,height:22},{paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container},{strokeWidth:.5,stroke:"#696969",symbolStrokeWidth:0,margin:{right:22},btnTextStyle:{fontSize:14},label:o,labelFill:"#696969"}),i.toDate=new this.toolbox.InputTextBoxSymbol({width:120,height:22},{paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container},{strokeWidth:.5,stroke:"#696969",symbolStrokeWidth:0,btnTextStyle:{fontSize:14},label:r,labelFill:"#696969"}),i.fromDate.attachEventHandlers({click:{fn:i.fromDate.edit},textOnBlur:function(){i.fromDate.blur(),i.startDate=i.fromDate.getText()}}),i.toDate.attachEventHandlers({click:{fn:i.toDate.edit},textOnBlur:function(){i.toDate.blur(),i.endDate=i.toDate.getText()}}),this.SymbolStore.register("textBoxIcon",function(t,e,a,n,o,r,i){var s=t-n/2+r/2,l=t+n/2-r/2,h=e-o/2+i/2,c=e+o/2-i/2;return["M",s,h,"L",l,h,"L",l,c,"L",s,c,"Z"]}),n.addSymbol(e),n.addSymbol(i.fromDate),n.addSymbol(a),n.addSymbol(i.toDate),t.addComponent(n),t}},{key:"getLogicalSpace",value:function(t,e){t/=2;var a,n,o,r=0,i=0;for(n=0,o=this.toolbars.length;n<o;n++)a=this.toolbars[n].getLogicalSpace(t,e),r=Math.max(a.width,r),i+=a.height,this.toolbars[n].width=a.width,this.toolbars[n].height=a.height;return i+=this.padding,{width:r,height:i}}},{key:"placeInCanvas",value:function(){var t=this;t.padding=5,t.spaceManagerInstance.add([{name:function(){return"ToolBoxExt"},ref:function(t){return t[0]},self:function(){return t},priority:function(){return 2},layout:function(t){return t.inline},orientation:[{type:function(t){return t.horizontal},position:[{type:function(t){return t.top},alignment:[{type:function(t){return t.right},dimensions:[function(){var e=this.getParentComponentGroup();return t.getLogicalSpace(e.getWidth(),e.getHeight())}]}]}]}]}])}},{key:"setDrawingConfiguration",value:function(t,e,a,n,o){var r=this.measurement;return r.x=t,r.y=e,r.width=a,r.height=n,this.parentGroup=o,this}},{key:"draw",value:function(t,e,a,n,o){var r,i,s,l=this.measurement,h=this.toolbars,c=this.globalReactiveModel,u=this;if(t=void 0===t?l.x:t,e=void 0===e?l.y:e,a=void 0===a?l.width:a,n=void 0===n?l.height:n,o=void 0===o?this.parentGroup:o,a&&n)for(i=0,r=h.length;i<r;i++)s=h[i],s.draw(t,e,o);c.onPropsChange(["x-axis-visible-range-start","x-axis-visible-range-end"],function(t,e){u.fromDate.blur(u.dateFormatter(new Date(t[1]),"-")),u.toDate.blur(u.dateFormatter(new Date(e[1]),"-"))}),c.onPropsChange(["x-axis-visible-range-start"],function(t){u.fromDate.blur(u.dateFormatter(new Date(t[1]),"-"))}),c.onPropsChange(["x-axis-visible-range-end"],function(t){u.toDate.blur(u.dateFormatter(new Date(t[1]),"-"))})}},{key:"startDate",get:function(){return this.startDt},set:function(t){var e=+new Date(t);e<=this.endDt&&(this.startDt=e,this.globalReactiveModel.model["x-axis-visible-range-start"]=this.startDt)}},{key:"endDate",get:function(){return this.endDt},set:function(t){var e=+new Date(t);e>=this.startDt&&(this.endDt=e,this.globalReactiveModel.model["x-axis-visible-range-end"]=this.endDt)}}]),e}();return e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,