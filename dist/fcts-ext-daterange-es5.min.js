!function(t){function e(r){if(n[r])return n[r].exports;var a=n[r]={exports:{},id:r,loaded:!1};return t[r].call(a.exports,a,a.exports,e),a.loaded=!0,a.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";var r=n(1);FusionCharts.register("extension",["date-range-chooser",function(t){var e=this,n=e.extAPI;n({init:function(t){t("X-Axis","Y-Axis","graphics",function(t,n,r){e.x=t,e.y=n,e.paper=r}),window.dateRange=new r,window.paper=e.paper},placeInCanvas:function(){window.dateRange.range={startDate:12,endDate:23}},draw:function(){var t=e.paper.text(20,22,"From: ");t.attr("font-family","sans-serif"),t.attr("fill","#000");var n=e.paper.rect(50,10,60,25);n.attr("stroke","#000");var r=e.paper.text(63,22,window.dateRange.range.startDate);r.attr("font-family","sans-serif"),r.attr("fill","#000");var a=e.paper.text(170,22,"To: ");a.attr("font-family","sans-serif"),a.attr("fill","#000");var o=e.paper.rect(190,10,60,25);o.attr("stroke","#000");var i=e.paper.text(203,22,window.dateRange.range.endDate);i.attr("font-family","sans-serif"),i.attr("fill","#000")},dispose:function(){}})}])},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=n(2),i=n(4),s=function(){function t(){r(this,t),this.dateRange={startDate:0,endDate:0}}return a(t,[{key:"swapDates",value:function(){var t=this.dateRange.startDate;this.dateRange.startDate=this.dateRange.endDate,this.dateRange.endDate=t}},{key:"range",get:function(){return this.dateRange},set:function(t){if(t.startDate<=t.endDate){this.dateRange.startDate=t.startDate,this.dateRange.endDate=t.endDate;var e=new o;e.timestamp=this.dateRange.startDate,console.log(e.timestamp);var n=new i;n.timestamp=this.dateRange.endDate,console.log(n.timestamp)}}}]),t}();t.exports=s},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function o(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var i=n(3),s=function(t){function e(){return r(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return o(e,t),e}(i);t.exports=s},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=function(){function t(){n(this,t),this.time=0}return r(t,[{key:"displayDate",value:function(){}},{key:"timestamp",get:function(){return this.time},set:function(t){this.time=t}}]),t}();t.exports=a},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function o(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var i=n(3),s=function(t){function e(){return r(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return o(e,t),e}(i);t.exports=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,