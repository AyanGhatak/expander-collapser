!function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";var r=n(1),o=n(2),i=n(4),a=n(5);a.register("extension",["date-range-chooser",function(t){var e=this,n=e.extAPI;console.log(t),n({init:function(t){t("X-Axis","Y-Axis",function(t,n){e.x=t,e.y=n})},placeInCanvas:function(){var t=new r;t.range={startDate:12,endDate:23};var e=new o;console.log(e.startDate);var n=new i;console.log(n.endDate)},draw:function(){},dispose:function(){}})}])},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function(){function t(){n(this,t),this.dateRange={startDate:0,endDate:0}}return r(t,[{key:"swapDates",value:function(){var t=this.dateRange.startDate;this.dateRange.startDate=this.dateRange.endDate,this.dateRange.endDate=t}},{key:"range",get:function(){return this.dateRange},set:function(t){t.startDate<=t.endDate&&(this.dateRange.startDate=t.startDate,this.dateRange.endDate=t.endDate)}}]),t}();t.exports=o},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=n(3),c=function(t){function e(){r(this,e);var t=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return t.date="01/01/1970",t}return i(e,t),a(e,[{key:"startDate",get:function(){return this.date},set:function(t){this.date=t}}]),e}(u);t.exports=c},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function(){function t(){n(this,t),this.time=0}return r(t,[{key:"timestamp",get:function(){return this.time},set:function(t){this.time=t}}]),t}();t.exports=o},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=n(3),c=function(t){function e(){r(this,e);var t=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return t.date="01/01/1970",t}return i(e,t),a(e,[{key:"endDate",get:function(){return this.date},set:function(t){this.date=t}}]),e}(u);t.exports=c},function(t,e){"use strict";var n=function(){};n.register=function(t,e){var n=e[0],r=e[1];console.log("Currently active extension: "+n),r.bind(this,565)()},n.getComponent=function(t,e){var n={x:24,y:56,width:100,height:20,index:4};return"api"===t&&"toolbox"===e?n:null},n.extAPI=function(t){t.init(function(){for(var t=[],e=arguments[arguments.length-1],n=0;n<arguments.length-1;n++)"X-Axis"===arguments[n]?t.push(156772):"Y-Axis"===arguments[n]&&t.push(156765);e.apply(this,t)}),t.placeInCanvas(),t.draw(),t.dispose()},t.exports=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,