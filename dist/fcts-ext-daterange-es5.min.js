!function(t){function e(n){if(a[n])return a[n].exports;var o=a[n]={exports:{},id:n,loaded:!1};return t[n].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var a={};return e.m=t,e.c=a,e.p="",e(0)}([function(t,e,a){(function(t){"use strict";var e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n=a(2);window.dr=new n,function(a,n){"object"===e(t)&&t.exports?t.exports=a.document?n(a):function(t){if(!t.document)throw new Error("Window with document not present");return n(t,!0)}:a.DateRangeChooser=n(a,!0)}("undefined"!=typeof window?window:void 0,function(t,e){var a=t.FusionCharts;a.register("extension",["private","DateRangeChooser",function(){a.registerComponent("extensions","DateRangeChooser",n)}])})}).call(e,a(1)(t))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children=[],t.webpackPolyfill=1),t}},function(t,e){"use strict";function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var n=function(){function t(t,e){for(var a=0;a<e.length;a++){var n=e[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,a,n){return a&&t(e.prototype,a),n&&t(e,n),e}}(),o=function(){function t(){a(this,t),this.startDt=0,this.endDt=0,this.startDataset=0,this.endDataset=0,this.toolbox=FusionCharts.getComponent("api","toolbox"),this.HorizontalToolbar=this.toolbox.HorizontalToolbar,this.ComponentGroup=this.toolbox.ComponentGroup,this.SymbolStore=this.toolbox.SymbolStore,this.startText={attr:function(){}},this.endText={attr:function(){}}}return n(t,[{key:"swapDates",value:function(){var t=this.dateRange.startDate;this.dateRange.startDate=this.dateRange.endDate,this.dateRange.endDate=t}},{key:"syncRange",value:function(){}},{key:"getFormattedDate",value:function(t){return this.chart.getFormattedDate(t)}},{key:"getTimestamp",value:function(t){return this.chart.getTimestamp(t)}},{key:"setConfig",value:function(t){}},{key:"getConfig",value:function(){return{calendarVisible:"false"}}},{key:"init",value:function(t){var e=this;return t(["xAxis","yAxis","graphics","chart","dataset","PlotManager","canvasConfig","MarkerManager","reactiveModel","globalReactiveModel","spaceManagerInstance","smartLabel",function(t,a,n,o,i,r,s,l,h,c,u,d){e.xAxis=t,e.yAxis=a,e.graphics=n,e.chart=o,e.dataset=i,e.plotManager=r,e.markerManager=l,e.canvasConfig=s,e.reactiveModel=h,e.globalReactiveModel=c,e.spaceManagerInstance=u,e.smartLabel=d}]),this.spaceManagerInstance=e.spaceManagerInstance,this.globalReactiveModel=e.globalReactiveModel,this.startDt=e.globalReactiveModel.model["x-axis-visible-range-start"],this.endDt=e.globalReactiveModel.model["x-axis-visible-range-end"],this.startDataset=e.globalReactiveModel.model["x-axis-absolute-range-start"],this.endDataset=e.globalReactiveModel.model["x-axis-absolute-range-end"],this.toolbars=[],this.measurement={},this.toolbars.push(this.createToolbar()),console.log(this.createToolbar()),console.log(this.dateStart,this.dateEnd),this}},{key:"createToolbar",value:function(){var t,e,a,n,o,i,r,s,l=this;return r=new Date(this.startDt).getUTCMonth()+1+"-"+new Date(this.startDt).getUTCDate()+"-"+new Date(this.startDt).getUTCFullYear(),s=new Date(this.endDt).getUTCMonth()+"-"+(new Date(this.endDt).getUTCDate()+1)+"-"+new Date(this.endDt).getUTCFullYear(),t=new this.HorizontalToolbar({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),t.setConfig({fill:"#fff",borderThickness:0}),i=new this.toolbox.ComponentGroup({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),i.setConfig({fill:"#fff",borderThickness:0}),n=new this.toolbox.Label("From:",{smartLabel:this.smartLabel,paper:this.graphics.paper},{text:{style:{"font-size":"15",fontFamily:"MyriadPro"}}}),e=new this.toolbox.InputTextBoxSymbol({width:120,height:25},{paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container},{strokeWidth:1,stroke:"rgba(102,102,102,0.5)",symbolStrokeWidth:0,btnTextStyle:{fontSize:14},label:r}),o=new this.toolbox.Label("To:",{smartLabel:this.smartLabel,paper:this.graphics.paper},{text:{style:{"font-size":"15",fontFamily:"MyriadPro"}}}),a=new this.toolbox.InputTextBoxSymbol({width:120,height:25},{paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container},{strokeWidth:1,stroke:"rgba(102,102,102,0.5)",symbolStrokeWidth:0,btnTextStyle:{fontSize:14},label:s}),e.attachEventHandlers({click:{fn:e.edit},textOnBlur:function(){e.blur(),l.startDate=e.getText(),console.log(e.getText())}}),a.attachEventHandlers({click:{fn:a.edit},textOnBlur:function(){a.blur(),console.log(a.getText()),l.endDate=a.getText()}}),this.SymbolStore.register("textBoxIcon",function(t,e,a,n,o,i,r){var s=t-n/2+i/2,l=t+n/2-i/2,h=e-o/2+r/2,c=e+o/2-r/2;return["M",s,h,"L",l,h,"L",l,c,"L",s,c,"Z"]}),i.addSymbol(n),i.addSymbol(e),i.addSymbol(o),i.addSymbol(a),t.addComponent(i),t}},{key:"getLogicalSpace",value:function(t,e){t/=2;var a,n,o,i=0,r=0;for(n=0,o=this.toolbars.length;n<o;n++)a=this.toolbars[n].getLogicalSpace(),i=Math.max(a.width,i),r+=a.height,this.toolbars[n].width=a.width,this.toolbars[n].height=a.height;return r+=this.padding,{width:i>t?0:i,height:r>e?0:r}}},{key:"placeInCanvas",value:function(){var t=this;t.padding=5,t.spaceManagerInstance.add([{name:function(){return"ToolBoxExt"},ref:function(t){return t[0]},self:function(){return t},priority:function(){return 2},layout:function(t){return t.inline},orientation:[{type:function(t){return t.horizontal},position:[{type:function(t){return t.top},alignment:[{type:function(t){return t.left},dimensions:[function(){var e=this.getParentComponentGroup();return t.getLogicalSpace(e.getWidth(),e.getHeight())}]}]}]}]}])}},{key:"setDrawingConfiguration",value:function(t,e,a,n,o){var i=this.measurement;return i.x=t,i.y=e,i.width=a,i.height=n,this.parentGroup=o,this}},{key:"draw",value:function(t,e,a,n,o){var i,r,s,l=this.measurement,h=this.toolbars;if(t=void 0===t?l.x:t,e=void 0===e?l.y:e,a=void 0===a?l.width:a,n=void 0===n?l.height:n,o=void 0===o?this.parentGroup:o,a&&n)for(r=0,i=h.length;r<i;r++)s=h[r],s.draw(t,e)}},{key:"startDate",get:function(){return this.startDt},set:function(t){var e=+new Date(t);e<=this.endDt&&(this.startDt=e,this.globalReactiveModel.model["x-axis-visible-range-start"]=this.startDt)}},{key:"endDate",get:function(){return this.endDt},set:function(t){var e=+new Date(t);console.log(t),e>=this.startDt&&(this.endDt=e,this.globalReactiveModel.model["x-axis-visible-range-end"]=this.endDt)}}]),t}();"undefined"!=typeof t&&"undefined"!=typeof t.exports?t.exports=o:window.StandardPeriod=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,